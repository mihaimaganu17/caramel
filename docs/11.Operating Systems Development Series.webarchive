bplist00“_WebMainResource_WebSubresources’	
_WebResourceData_WebResourceMIMEType_WebResourceTextEncodingName^WebResourceURL_WebResourceFrameNameO≠ı<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><!-- saved from url=(0056)http://www.gamedev.net/reference/articles/article290.asp --><html><head><title>Operating Systems Development Series</title> 
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252"><link href="Files/reference.css" type="text/css" rel="stylesheet"> 
<meta content="MSHTML 6.00.6000.16441" name="GENERATOR"></head> 
<body text="#000000" vlink="#666699" alink="#000000" link="#666699" bgcolor="#ffffff" leftmargin="0" background="Files/watermark.gif" topmargin="0" marginheight="0" marginwidth="0"> 


<table border="0" cellpadding="0" cellspacing="0" width="100%"> 
<tbody><tr> 
     <td width="60%"> 
	<a href="http://www.brokenthorn.com"><img src="site/5.png" border="0"></a> 
     </td> 
     <td width="40%"> 
 
        <div id="ad_main"> 
 
<script type="text/javascript"><!--
google_ad_client = "pub-9243579471203558";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
google_ui_features = "rc:6";
//-->
</script> 
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script> 
        </div> 
 
     </td> 
  </tr> 
</tbody></table> 

<table cellspacing="0" cellpadding="3" width="100%" border="0"> 
  <tbody> 
  <tr> 
    <td class="tblhdr">Operating Systems Development Series</td> 
</tr> 
  <tr> 
 
    <td align="middle" colspan="2"></td></tr></tbody></table> 
<table cellspacing="0" cellpadding="5" width="100%" border="0"> 
  <tbody> 
  <tr> 
    <td> 
 
 
<!-- Title --> 
 
      <center><span class="title">Operating Systems Development - Prepare for the Kernel part 2</span> 
 
<br><span class="author">by Mike, 2008</span></center> 
 
      <p>This series is intended to demonstrate and teach operating system development from
	the ground up.</p> 
 
	<h1>Introduction</h1> 
	Welcome! :)<p> 
 
	In the previous tutorial, we talked about basic VGA programming in protected mode, and
	even built a 1337 demo too!
 	</p><p> 
	This is the tutorial you have been waiting for. It builds directly on the all of the previus code,
	and loads our Kernel at te 1 MB mark, and executes our Kernel.
	</p><p> 
 
	The Kernel is the most important part of our OS. The Kernel...We have talked a little about this
	mysterous foe before, havn't we? We will talk about the Kernel alot more in the next few tutorials,
	including design, structure, and development.
	</p><p> 
	Right now, we already have everything set up... It's time to load the Kernel and say good bye to Stage 2!
	</p><p> 
	<b>Note: This tutorial requires a basic understanding of the Bootloaders 3 and 4 tutorials. We cover everything
	in detail here, but all of the concepts are explained in depth in the Bootloaders 3 and 4 Tutorials. If you
	have not read those tutorials, Please look at those tutorials first.</b> 
	</p><p> 
	<a href="OSDev5.html">OS Development Series Tutorial 5: Bootloaders 3</a></p><p> 
	<a href="OSDev6.html">OS Development Series Tutorial 6: Bootloaders 4</a></p><p> 
 
	If you have read them, this tutorial should not be that hard.
	</p><p> 
	<i>Ready?</i> 
 
	</p><h1>A Basic Kernel Stub</h1> 
 
	This is the Kernel we will load:
 
      <blockquote><pre><div class="code">; We are still pure binary. We will fix this in the next few tutorials :)
 
org	0x10000			; Kernel starts at 1 MB
bits	32			; 32 bit code
 
jmp	Stage3			; jump to stage 3
 
%include "stdio.inc"		; Our stdio.inc file we developed from the previous tutorial
 
msg db  0x0A, 0x0A, "Welcome to Kernel Land!!", 0x0A, 0
 
Stage3:
 
	;-------------------------------;
	;   Set registers		;
	;-------------------------------;
 
	mov		ax, 0x10		; set data segments to data selector (0x10)
	mov		ds, ax
	mov		ss, ax
	mov		es, ax
	mov		esp, 90000h		; stack begins from 90000h
 
	;---------------------------------------;
	;   Clear screen and print success	;
	;---------------------------------------;
 
	call		ClrScr32
	mov		ebx, msg
	call		Puts32
 
	;---------------------------------------;
	;   Stop execution			;
	;---------------------------------------;
 
	cli
	hlt</div></pre></blockquote> 
 
	Okay, there is nothing much here. We will build on this program heavily in the next section.
	<p> 
 
	Notice that it is all 32 bit. Sweet, huh? We are going to be out of the 16 bit world completely here.
	</p><p> 
	For now, we just hault the system when we get to the Kernel.
	</p><p> 
	Please note that we will not be using this file probably at all in the rest of the series. Rather,
	we will be using a 32 bit C++ compilier. After we load the kernel image in memory, we can parse the file
	in memory for the kernel entry routine and call the C main() routine directly from our 2nd stage boot loader.
	Cool, huh? In other words, we will go from our 2nd stage boot loader directly into the C++ world without
	any stub file or program. However, we need a starting point. Because of this, we will use a basic
	stub file in this tutorial to help test and demenstrate it working.
	</p><p> 
	In the next few tutorials we will be getting our compiliers up and working and use that instead. But now we
	are getting ahead of ourselves here ;)
 
	</p><h1>The floppy interface</h1> 
 
	Yey! Its time to finish off stage 2! In oder to load the Kernel we need to traverse FAT12 again.
	But before that, we have to get sectors off disk.
	<p> 
	This code is EXACTALLY the same from our bootloader, and uses the BIOS INT 0x13 to load sectors off disk.
	</p><p> 
	Because this tutorial is also a complete review, lets break each routine into sections and describe exactally
	what is going on.
 
	</p><h2>Reading a sector - BIOS INT 0x13</h2> 
 
	We talked about everything requarding loading sectors in our <b>Bootloaders 3</b>. Looking back at the tutorial,
	remember that we can use the <b>BIOS Interrupt 0x13 function 2</b> to read a sector. Okay, then. The problem
	here is that <b>We have to load sectors before going into protected mode.</b> If we attempt to call a BIOS interrupt
	from protected mode, the processor will triple fault, remember?
	<p> 
	Anyways, what was the interrupt? Right....
 
</p><p><b>INT 0x13/AH=0x02 - DISK : READ SECTOR(S) INTO MEMORY</b><br> 
	AH = 0x02<br> 
 
	AL = Number of sectors to read<br> 
	CH = Low eight bits of cylinder number<br> 
	CL = Sector Number (Bits 0-5). Bits 6-7 are for hard disks only<br> 
 
	DH = Head Number<br> 
	DL = Drive Number (Bit 7 set for hard disks)<br> 
	ES:BX = Buffer to read sectors to</p><p> 
 
	Returns:<br> 
	AH = Status Code<br> 
	AL = Number of sectors read<br> 
 
	CF = set if failure, cleared is successfull</p><p> 
 
	This is not THAT hard. Remember from the Bootloaders tutorial though. That is, we need to keep track of the
	sector, track, and head number, and insure we don't load attempt to load a sector beyond the track. That is,
	<b>Remember that there are 18 sectors per track? Setting the sector number greater then 18 will cause
	the controller to fail, and processor to triple fault.</b> 
 
	</p><p> 
	Okay...18 sectors per track. Remember that each sector if 512 bytes. Also, remember that there are
80 tracks per side.
	</p><p> 
	Okay then! All of this information... Sectors per track, the number of tracks, number of heads,
	the size of a sector, completely depend on the disk itself. Remember that a sector does not NEED to be
	512 bytes?
	</p><p> 
	We describe everything in the OEM Parameter Block:
      </p><blockquote><pre><div class="code">bpbOEM			db "My OS   "
bpbBytesPerSector:  	DW 512
bpbSectorsPerCluster: 	DB 1
bpbReservedSectors: 	DW 1
bpbNumberOfFATs: 	DB 2
bpbRootEntries: 	DW 224
bpbTotalSectors: 	DW 2880
bpbMedia: 		DB 0xf0  ;; 0xF1
bpbSectorsPerFAT: 	DW 9
bpbSectorsPerTrack: 	DW 18
bpbHeadsPerCylinder: 	DW 2
bpbHiddenSectors: 	DD 0
bpbTotalSectorsBig:     DD 0
bsDriveNumber: 	        DB 0
bsUnused: 		DB 0
bsExtBootSignature: 	DB 0x29
bsSerialNumber:	        DD 0xa0a1a2a3
bsVolumeLabel: 	        DB "MOS FLOPPY "
bsFileSystem: 	        DB "FAT12   "</div></pre></blockquote> 
	This should look familiar! Each member has been described in Tutorial 5--Please see that tutorial for a full
	detailed explination of everything here.
	<p> 
	Now, all we need to have is a method so that we can load any number of sectors from disk to some location in memory.
	We immediately run into a problem though. Okay--<b>We know what sector we want to load</b>. However, <b>BIOS INT 0x13
	does not work with sectors.</b> Okay, it does--but it also works with cylinders (Remember that a cylinder is just a head?) and tracks.
	</p><p> 
 
	So what does this have to do with anything? Imagine if we want to load sector 20. We cannot directly use this number,
	because <b>there are only 18 sectors per track</b>. Attempting to read from the 20th sector on the current track
	will cause the floppy controller to fail, and processor to triple fault, as that sector does not exist. <b>In order
	to read the 20'th sector, we have to read Track 2 Sector 2, Head 0</b> We will verify this later.
	</p><p> 
	What this means as that, if we want to specify a sector to load, we need to convert our linear sector number into
	the exact cylinder, track, and sector location on disk.
	</p><p> 
	Wait for it...Aha! Remember our <b>CHS to LBA</b> conversition routines?
 
	</p><h3>Converting LBA to CHS</h3> 
 
	This should sound familiar, doesn't it? <b>Linear Block Addressing (LBA)</b> simply represents an indexed location
	on disk. The first block being 0, the second block being 1. In other words, LBA simply represents the sector number,
	beginning with 0, where each "block" is a single "sector".
	<p> 
	Anywhoo...We have to find a way to convert this sector number (LBA) to the exact cylinder/head/secor location on
	disk. <b>Remember this from Bootloaders 4 tutorial?</b> 
	</p><p> 
	Some of our readers exclaimed this code was fairly tricky--and I am to admit it is. So, I am going to
	excplain it in detail here.
	</p><p> 
	First, lets look at the forumlas again:
      </p><blockquote><pre><div class="code">absolute sector 	= 	(logical sector / sectors per track) + 1
      absolute head   	= 	(logical sector / sectors per track) MOD number of heads
      absolute track 	= 	 logical sector / (sectors per track * number of heads)</div></pre></blockquote> 
 
	Okay! This is pretty easy, huh? The "logical sector" is the actual sector number we want.
	Note that the <b>logical sector / sectors per track</b> is inside of all of the above equations.
	<p> 
	Because this division is inside of all of these equations, we can store it's result and use it for
	the other two expressions.
	</p><p> 
	Lets put this into an example. We already said the 20th sector should be Track 2, Sector 2, remember?
	Lets try to put this formula to the test then:
 
      </p><blockquote><pre><div class="code">absolute sector 	= 	(logical sector / sectors per track) + 1
 
	2.1111111111111111111111111111111	=	20 / 18 (sectors per track) + 1</div></pre></blockquote> 
	We only keep the absolute number (2)--Aha! Sector 2! Note that we need to add 1 here because LBA addressing
	begins from 0.
 
	Remember that the basic formula "logical sector / sectors per track" is in ALL of these formulas.
	It is simply 1.1111111111111111111111111111111 in this example (Note in the above formula, we added 1 more).
	Because we are working with whole numbers, this is simply 1.
      <blockquote><pre><div class="code">absolute head   	= 	(logical sector / sectors per track) MOD number of heads
 
				(1) MOD Number of heads (2)
				= Head 1</div></pre></blockquote> 
 
	Remember from the OEM Block that we specified 2 heads per cylinder. So far, this indicates sector 2 on Head 1.
	Great--but what track are we on?
 
      <blockquote><pre><div class="code">absolute track 	= 	 logical sector / (sectors per track * number of heads)
 
				(1) * Number of heads (2)
				= Track 2</div></pre></blockquote> 
	Notice that this is the exact same formula as above. The ONLY difference is that simple operation.
	<p> 
	Anywhoo... following the formula we have: <b>Logical Sector 20 is on Sector 2 Track 2 Head 0</b>. Compare this with
	what we originally said in the previous section, and notice how this forumla works ;)
	</p><p> 
	Okay, so now lets try to apply these formulas in the code:
	</p><p> 
	<b>LBACHS Explanation: Detail</b> 
 
	</p><p> 
	Okay, this routine takes one parameter: AX, which contains the logical sector to convert into CHS.
	Note the formula <b>(logical sector / sectors per track)</b> is part of all three formulas. Rather
	then recalculating this over and over, it is more efficiant to just calculate it <b>once</b>,
	and use that result in all of the other calculations... This is how this routine works.
 
      </p><blockquote><pre><div class="code">LBACHS:
          xor     dx, dx                              ; prepare dx:ax for operation
          div     WORD [bpbSectorsPerTrack]           ; calculate</div></pre></blockquote> 
 
	Now AX contains the logical sector / sectors per track operation.
	<p> 
	Begin with sector 1 (Remember the + 1 in logical sector / sectors per track ?)
 
      </p><blockquote><pre><div class="code">          inc     dl                                  ; adjust for sector 0
          mov     BYTE [absoluteSector], dl</div></pre></blockquote> 
 
	Clear DX. AX still contains the result of logical sector / sectors per track
      <blockquote><pre><div class="code">          xor     dx, dx                              ; prepare dx:ax for operation</div></pre></blockquote> 
	Now for the formulas...<p> 
 
      absolute head   	= 	(logical sector / sectors per track) MOD number of heads
	</p><p> 
      absolute track 	= 	 logical sector / (sectors per track * number of heads)
	</p><p> 
	The multiplication results into a <b>division</b> by the number of heads. So the only difference
	between these two is the operation--one is division, and one is the remainder of that division (The Modulus).</p><p> 
 
	Okay, lessee...What instruction can we use that could return both the remainder (MOD) and
	division result? DIV!
	</p><p> 
	Remember that (logical sector / sectors per track) is still in AX, so all we need to do is divide
	by number of heads per cylinder...
      </p><blockquote><pre><div class="code">          div     WORD [bpbHeadsPerCylinder]          ; calculate</div></pre></blockquote> 
	The equtions for absolute head and absolute track are very simular. The only actual difference is
	the operation. <b>This simple DIV instruction sets both DX and AX. AX Now stores the DIVISION
	of HeadsPerCylinder; DX now contains the REMAINDER (Modolus) of the same operation)</b> 
 
      <blockquote><pre><div class="code">          mov     BYTE [absoluteHead], dl
          mov     BYTE [absoluteTrack], al
          ret</div></pre></blockquote> 
 
	I hope this clears things up a bit. If not, please let me know ;)
 
	<h3>Converting CHS to LBA</h3> 
	This is alot more simpler:
 
      <blockquote><pre><div class="code">ClusterLBA:
	; LBA	=	(cluster - 2 ) * sectors per cluster
 
          sub     ax, 0x0002                          ; subtract 2 from cluster number
          xor     cx, cx
          mov     cl, BYTE [bpbSectorsPerCluster]     ; get sectors per cluster
          mul     cx                                  ; multply</div></pre></blockquote> 
 
	<h3>Reading in sectors</h3> 
 
	Okay, so now we have everything to read in sectors. This code is also exactally the same from the bootloader.
 
      <blockquote><pre><div class="code">;************************************************;
; Reads a series of sectors
; CX=&gt;Number of sectors to read
; AX=&gt;Starting sector
; ES:BX=&gt;Buffer to read to
;************************************************;
 
ReadSectors:
     .MAIN
          mov     di, 0x0005                          ; five retries for error</div></pre></blockquote> 
 
	Okay, here we attempt to read the sectors 5 times.
 
      <blockquote><pre><div class="code">     .SECTORLOOP
          push    ax
          push    bx
          push    cx
          call    LBACHS                              ; convert starting sector to CHS</div></pre></blockquote> 
 
	We store the registers on the stack. The starting sector is a linear sector number (Stored in AX).
	Because we are using BIOS INT 0x13, We need to convert this to CHS before reading from the disk.
	So, we use our LBA to CHS coversition routine. Now, <b>absoluteTrack</b> contains the track number,
	<b>absoluteSector</b> contains the sector within the track, and <b>absoluteHead</b> contains the head number.
	All of this was set by our LBA to CHA conversition routine, remember?
 
      <blockquote><pre><div class="code">          mov     ah, 0x02                            ; BIOS read sector
          mov     al, 0x01                            ; read one sector
          mov     ch, BYTE [absoluteTrack]            ; track
          mov     cl, BYTE [absoluteSector]           ; sector
          mov     dh, BYTE [absoluteHead]             ; head
          mov     dl, BYTE [bsDriveNumber]            ; drive
          int     0x13                                ; invoke BIOS</div></pre></blockquote> 
 
	Now we set up to read a sector, and envoke the BIOS to read it. For simplicity, lets take another look
	at the BIOS INT 0x13 routine that we are executing:
<p><b>INT 0x13/AH=0x02 - DISK : READ SECTOR(S) INTO MEMORY</b><br> 
	AH = 0x02<br> 
	AL = Number of sectors to read<br> 
	CH = Low eight bits of cylinder number<br> 
	CL = Sector Number (Bits 0-5). Bits 6-7 are for hard disks only<br> 
	DH = Head Number<br> 
 
	DL = Drive Number (Bit 7 set for hard disks)<br> 
	ES:BX = Buffer to read sectors to</p><p> 
	</p><p> 
	Compare this with how we execute the code above--fairly simple, huh?
	</p><p> 
	Remember that the buffer to write to is in ES:BX, which INT 0x13 refrences as the buffer. We passed
	ES:BX into this routine, so that is the location to load the sectors to.
 
      </p><blockquote><pre><div class="code">          jnc     .SUCCESS                            ; test for read error
          xor     ax, ax                              ; BIOS reset disk
          int     0x13                                ; invoke BIOS
          dec     di                                  ; decrement error counter
          pop     cx
          pop     bx
          pop     ax
          jnz     .SECTORLOOP                         ; attempt to read again</div></pre></blockquote> 
	The BIOS INT 0x13 function 2 sets the Carry Flag (CF) is there is an error.
	If there is an error, decrement the counter (Remember we set up the loop to
	try 5 times?), and then try again!
	<p> 
 
	If all 5 attemps failed (CX=0, Zero flag set), then we fall down to the INT 0x18 instruction:
      </p><blockquote><pre><div class="code">          int     0x18</div></pre></blockquote> 
	...Which reboots the computer.
	<p> 
	If the Carry Flag was NOT set (CF=0), then the <b>jnz</b> instruction jumps here, as it indicates
	that there was no error. The sector was read successfully.
      </p><blockquote><pre><div class="code">     .SUCCESS
          pop     cx
          pop     bx
          pop     ax
          add     bx, WORD [bpbBytesPerSector]        ; queue next buffer
          inc     ax                                  ; queue next sector
          loop    .MAIN                               ; read next sector
          ret</div></pre></blockquote> 
 
	Now, just restore the registers, and go to the next sector. Not to hard :) Note that, because ES:BX
	contains the address to load the sectors to, we need to increment BX by the bytes per sector to go to
	the next sector.
	<p> 
	AX contained the <b>starting sector</b> to read from, so we need to increment that too.
	</p><p> 
	I guess thats all for now. Please refrence <b>Bootloaders 4</b> for a full explaination of this routine.
	</p><p> 
	</p><h3>Floppy16.inc</h3> 
 
	In the example demo, all of the floppy access routines are inside of <b>Floppy16.inc</b>.
 
 
	<h1>FAT12 Interface</h1> 
 
	Yey--We can load sectors. Woohoo... :( As you know, we cannot really do much with that. What we need to do
	next is create a basic definition of a "file" and what a "file" is. We do this by means of a <b>Filesystem</b>.
	<p> 
	Filesystems can get quite complex. Please refrence <b>Bootloaders 4</b> while I explain this code to fully
	understand how this code works.
 
	</p><h2>Constants</h2> 
 
	During parsing Fat12, we will be needing a location to load the root directory table
	and the FAT table. To make things somewhat easier, lets hide these locations behind
	constants:
 
      <blockquote><pre><div class="code">%define ROOT_OFFSET 0x2e00
%define FAT_SEG 0x2c0
%define ROOT_SEG 0x2e0</div></pre></blockquote> 
 
	We will be loading our root directory table to 0x2e00 and our FAT to 0x2c00. FAT_SEG
	and ROOT_SEG are used for loading into segment registers.
 
	<h2>Traversing FAT12</h2> 
 
	As you know, some OS code can simply get ugly. Filesystem code, in my opinion, is one of them. This is one of the
	reasons why I decided to go over this code in this review-like tutorial. The FAT12 code is basically the same
	as the bootloaders, but I decided to modify it to decrease dependencies with the main program. Because of this,
	I decided to describe it in detail here.
	<p>Please note, I will not be going over FAT12 in detail here. Please see the <b>Bootloaders 4</b> tutorial
	for complete details.
	</p><p> 
	Anywhoo, as you know, in order to traverse FAT12 the first thing we need to load is the <b>Root Directory Table</b>,
	so lets look at that first.
 
	</p><h3>Loading the Root Directory Table</h3> 
<i>Disk structure:</i><table border="2"> 
 
<tbody><tr bgcolor="#CCCCCC"> 
 
	<td>Boot Sector</td> 
	<td>Extra Reserved Sectors</td> 
	<td>File Allocation Table 1</td> 
	<td>File Allocation Table 2</td> 
	<td bgcolor="#AAAAAA">Root Directory (FAT12/FAT16 Only)</td> 
	<td>Data Region containng files and directories.</td> 
 
</tr> 
</tbody></table><p> 
	Remember that the Root Directory Table is located right after the FAT's and Reserved sectors?
	</p><p> 
	In loading the root directory table, we need to find a location in memory that we do not currently need
	and copy it there. For now, I chose 0x7E00 (Real mode: 0x7E0:0). This is right above our bootloader,
	which is <b>still in memory</b> because we have never overwritten it.
	</p><p> 
	There is an important concept here. Notice that we have to load everything at absolute memory locations.
	This is very bad, as we have to physically keep track of where things are located. This is where a <b>Low
	level memory manager</b> comes into play. More later...
 
      </p><blockquote><pre><div class="code">;*******************************************
; LoadRoot ()
;	- Load Root Directory Table
;*******************************************
 
LoadRoot:
 
	pusha						; store registers
	push	es</div></pre></blockquote> 
	We first store the current state of the registers. Not doing so will
	effect the rest of the program that uses it, which is very bad.
	<p> 
	Now we get the size of the root directory table, so that we know the number
	of sectors to load.
	</p><p> 
	Remember from <b>Bootloaders 4</b>: Each entry is 32 bytes in size. When we add a new
	file in a FAT12 formatted disk, Windows automatically appends to the root directory
	for us, and adds to the <b>bpbRootEntries</b> byte offset varable of the <b>OEM Parameter Block</b> 
 
	</p><p> 
	See...Windows is nice :)
	</p><p> 
	So...lessee, knowing each entry is 32 bytes in size, <b>multiplying 32 bytes by the number of root directories
	will tell us how many bytes there are in the Root Directory Table</b>. Simple enough, but we need the number
	of <b>sectors</b>--so we need to divide this result by the number of sectors:
 
      </p><blockquote><pre><div class="code">     ; compute size of root directory and store in "cx"
     
	xor     cx, cx					; clear registers
 	xor     dx, dx
	mov     ax, 32					; 32 byte directory entry
	mul     WORD [bpbRootEntries]			; total size of directory
	div     WORD [bpbBytesPerSector]		; sectors used by directory
	xchg    ax, cx					; move into AX</div></pre></blockquote> 
	OKAY, so now AX=number of sectors the root directory takes. Now, we have to find the starting location.
	<p> 
 
	Remember from <b>Bootloaders 4: The Root Directory table is Right after both FAT's and reserved sectors on the disk.</b> 
	Please look at the above disk structure table to see where the root directory table is located.
	</p><p> 
	So...All we need to do is get the amount of sectors for the FAT's, and add that to the reserved sectors to get the
	exact location on disk:
      </p><blockquote><pre><div class="code">     ; compute location of root directory and store in "ax"
     
	mov     al, byte [bpbNumberOfFATs]		; number of FATs
	mul     word [bpbSectorsPerFAT]			; sectors used by FATs
	add     ax, word [bpbReservedSectors]		; adjust for bootsector
	mov     word [datasector], ax			; base of root directory
	add     word [datasector], cx</div></pre></blockquote> 
 
	Now that we have the number of sectors to read in, and the exact starting sector, lets read it in!
 
      <blockquote><pre><div class="code">     ; read root directory
 
	push	word ROOT_SEG
	pop	es
	mov     bx, 0x0					; copy root dir
	call    ReadSectors				; read in directory table
	pop	es
	popa						; restore registers and return
	ret</div></pre></blockquote> 
 
	Notice that we set the seg:offset location to read into ROOT_SEG:0.
	<p> 
	Next up, loading the FAT!
 
	</p><h3>Loading the FAT</h3> 
 
	Okay...Remember from <b>Bootloaders 4</b>, we talked about the disk structure of a FAT12 formatted disk.
	Going Back in Time(tm), lets take another look:<p> 
<i>Disk structure:</i> 
<table border="2"> 
<tbody><tr bgcolor="#CCCCCC"> 
 
	<td>Boot Sector</td> 
	<td>Extra Reserved Sectors</td> 
	<td bgcolor="#AAAAAA">File Allocation Table 1</td> 
	<td bgcolor="#AAAAAA">File Allocation Table 2</td> 
	<td>Root Directory (FAT12/FAT16 Only)</td> 
	<td>Data Region containng files and directories.</td> 
 
</tr> 
</tbody></table></p><p> 
	Remember that there are either one or two FATs? Also notice that they are <b>right after</b> the reserved
	sectors on disk. <b>This should look familar!</b> 
 
      </p><blockquote><pre><div class="code">;*******************************************
; LoadFAT ()
;	- Loads FAT table
;
;	Parm/ ES:DI =&gt; Root Directory Table
;*******************************************
 
LoadFAT:
 
	pusha				; store registers
	push	es</div></pre></blockquote> 
 
	First we need to know how many sectors to load. Look back at the disk structure again. We store
	the number of FATs (and the sectors per FAT) in the OEM Parameter Block. So to get the total sectors,
	just multiply them:
 
      <blockquote><pre><div class="code">     ; compute size of FAT and store in "cx"
     
	xor     ax, ax
	mov     al, BYTE [bpbNumberOfFATs]		; number of FATs
	mul     word [bpbSectorsPerFAT]			; sectors used by FATs
	mov     cx, ax</div></pre></blockquote> 
 
	Now, we need to take the reserved sectors into coinsideration, as they are before the FAT...
      <blockquote><pre><div class="code">     ; compute location of FAT and store in "ax"
 
	mov     ax, word [bpbReservedSectors]</div></pre></blockquote> 
 
	Yippe! Now, CX contains the number of sectors to load, so call our routine to load the sectors!
      <blockquote><pre><div class="code">     ; read FAT into memory (Overwrite our bootloader at 0x7c00)
 
	push	word FAT_SEG
	pop	es
	xor	bx, bx
	call  ReadSectors
	pop	es
	popa		; restore registers and return
	ret</div></pre></blockquote> 
	Thats all there is to it ;)
 
 
	<h3>Searching for a file</h3> 
	In searching for a file, we need the filename to search with. Remember that DOS uses 11 byte file
	names followng the common 8.3 naming convention (8 byte file name, 3 character extension.) Because
	of the way the enteries in the Root directory is structured, <b>This MUST be 11 bytes--no exceptions</b>.
	<p> 
 
	Remember the format of the Root Directory Table: The filename is stored within the <b>first</b> 11 bytes of
	an entry. Lets take another look at the format of each directory entry:
</p><p> 
</p><ul> 
	<li><b>Bytes 0-7 : DOS File name (Padded with spaces)</b></li> 
	<li><b>Bytes 8-10 : DOS File extension (Padded with spaces)</b></li> 
 
	<li><b>Bytes 11 :</b> File attributes. This is a bit pattern: </li> 
 
	<ul> 
		<li><b>Bit 0 :</b> Read Only</li> 
		<li><b>Bit 1 :</b> Hidden</li> 
 
		<li><b>Bit 2 :</b> System</li> 
 
		<li><b>Bit 3 :</b> Volume Label</li> 
		<li><b>Bit 4 :</b> This is a subdirectory</li> 
		<li><b>Bit 5 :</b> Archive</li> 
 
		<li><b>Bit 6 :</b> Device (Internal use)</li> 
 
		<li><b>Bit 6 :</b> Unused</li> 
	</ul> 
	<li><b>Bytes 12 :</b> Unused</li> 
 
	<li><b>Bytes 13 :</b> Create time in ms</li> 
 
	<li><b>Bytes 14-15 :</b> Created time, using the following format: </li> 
	<ul> 
		<li><b>Bit 0-4 :</b> Seconds (0-29)</li> 
 
		<li><b>Bit 5-10 :</b> Minutes (0-59)</li> 
 
		<li><b>Bit 11-15 :</b> Hours (0-23)</li> 
	</ul> 
	<li><b>Bytes 16-17 :</b> Created year in the following format:</li> 
 
	<ul> 
		<li><b>Bit 0-4 :</b> Year (0=1980; 127=2107</li> 
 
		<li><b>Bit 5-8 :</b> Month (1=January; 12=December)</li> 
		<li><b>Bit 9-15 :</b> Hours (0-23)</li> 
 
	</ul> 
	<li><b>Bytes 18-19 :</b> Last access date (Uses same format as above)</li> 
 
	<li><b>Bytes 20-21 :</b> EA Index (Used in OS/2 and NT, dont worry about it)</li> 
	<li><b>Bytes 22-23 :</b> Last Modified time (See byte 14-15 for format)</li> 
 
	<li><b>Bytes 24-25 :</b> Last modified date (See bytes 16-17 for format)</li> 
	<li><b>Bytes 26-27 :</b> <b>First Cluster</b></li> 
 
	<li><b>Bytes 28-32 :</b> <b>File Size</b></li> 
</ul> 
<p></p> 
	All <b>Bolded</b> entrys are the important ones. We must compare the <b>first 11 bytes</b> of
	each entry, as they contain the filename.
	<p> 
	Once we find a match, <b>We need to refrence byte 26 of the entry to get it's current cluster</b>.
	All of this should sound familiar.
	</p><p> 
 
	Now...On to the code!
 
      </p><blockquote><pre><div class="code">;*******************************************
; FindFile ()
;	- Search for filename in root table
;
; parm/ DS:SI =&gt; File name
; ret/ AX =&gt; File index number in directory table. -1 if error
;*******************************************
 
FindFile:
 
	push	cx				; store registers
	push	dx
	push	bx
	mov	bx, si				; copy filename for later</div></pre></blockquote> 
	We first store the current register states. We need to use SI, so
	we need to save the current filename somewhere...BX, perhaps?
	<p> 
	Remember that we need to parse the Root Directory table to find the
	image name. To do this, we need to check the first 11 bytes of each
	entry in the directory table to see if we found a match. Sounds simple, huh?
	</p><p> 
	To do this, we need to know how many entries there are...
      </p><blockquote><pre><div class="code">     ; browse root directory for binary image
 
	mov     cx, word [bpbRootEntries]	; load loop counter
	mov     di, ROOT_OFFSET			; locate first root entry
	cld					; clear direction flag</div></pre></blockquote> 
	Okay, so CX now contains the number of entries to look in. All we need to do now
	is loop and compare the 11 byte character filename. Because we are using string
	instructions, we want to first insure the direction flag is cleared, which is
	what <b>cld</b> does.
	<p> 
 
	DI is set to the current offset into the directory table. This is the location of the
	table. i.e., ES:DI points to the starting location of the table, so lets parse it!
 
      </p><blockquote><pre><div class="code">.LOOP:
	push    cx
	mov     cx, 11				; eleven character name. Image name is in SI
	mov	si, bx				; image name is in BX
 	push    di
	rep  cmpsb				; test for entry match</div></pre></blockquote> 
 
	If the 11 bytes match, the file was found. Because DI contains the location of the entry
	within the table, we immediately jump to .Found.
	<p> 
	If it does not match, we need to try the next entry in the table. We add <b>32 bytes</b> onto DI.
	(<b>Remember that each entry is 32 bytes?</b>)
 
      </p><blockquote><pre><div class="code">	pop     di
	je      .Found
	pop     cx
	add     di, 32				; queue next directory entry
	loop    .LOOP</div></pre></blockquote> 
 
	If the file was not found, restore only the registers that are still on the stack,
	and return -1 (error)
      <blockquote><pre><div class="code">.NotFound:
	pop	bx				; restore registers and return
	pop	dx
	pop	cx
	mov	ax, -1				; set error code
	ret</div></pre></blockquote> 
 
	If the file was found, restore all of the registers. AX contains the entry location within
	the  Root Directory Table so that it can be loaded.
      <blockquote><pre><div class="code">.Found:
	pop	ax				; return value into AX contains entry of file
	pop	bx				; restore registers and return
	pop	dx
	pop	cx
	ret</div></pre></blockquote> 
	Yey! Now that we can find the file (and get it's location within the Root Directory Table), lets load it!
 
	<h3>Loading a file</h3> 
 
	Now that everything is finally set up, it is finally time to load the file!
	<p> 
	Most of this is pretty easy, as it calls our other routines. It is here that we loop,
	and insure that all of the file's clusters are loaded into memory.
 
      </p><blockquote><pre><div class="code">;*******************************************
; LoadFile ()
;	- Load file
; parm/ ES:SI =&gt; File to load
; parm/ BX:BP =&gt; Buffer to load file to
; ret/ AX =&gt; -1 on error, 0 on success
; ret/ CX =&gt; Number of sectors loaded
;*******************************************
 
LoadFile:
 
	xor		ecx, ecx
	push		ecx</div></pre></blockquote> 
	Here we just save the registers. We need to keep a copy of the buffer to write to somewhere,
	so we keep that on the stack as well. CX is used to keep track of how many sectors we have loaded.
	We store this on the stack for later.
	<p> 
	In loading the file, we will need to first find it (Kind of obvious, don't you think? ^^) We
	can easily use our FindFile routine here. FindFile sets AX to -1 on error, <b>or the starting
	entry location within the Root Directory Table upon success</b>. We can use this index to get
	anything we ever wanted to know about the file.
      </p><blockquote><pre><div class="code">.FIND_FILE:
 
	push	bx	; BX=&gt;BP points to buffer to write to; store it for later
	push	bp
 
	call	FindFile			; find our file. ES:SI contains our filename
 
	cmp	ax, -1				; check for error
	jne	.LOAD_IMAGE_PRE			; No error :) Load the FAT
	pop	bp				; Nope :( Restore registers, set error code and return
	pop	bx
	pop	ecx
	mov	ax, -1
	ret</div></pre></blockquote> 
 
	Okay, so if we get here, the file was found. ES:DI contains the location of the first root entry, which was set
	by FindFile(), so by refrencing ES:DI we effectivly get the file's entry.
	<p> 
	<b>Look back at the entry description table above in the previous section.</b> Notice that we can offset 0x1A bytes
	to get to byte 26 (The starting cluster number), so store it...
      </p><blockquote><pre><div class="code">.LOAD_IMAGE_PRE:
 
	sub	edi, ROOT_OFFSET
	sub	eax, ROOT_OFFSET
 
	; get starting cluster
 
	push	word ROOT_SEG
	pop	es
	mov     dx, word [es:di + 0x001A]; ES:DI points to file entry in root directory table.
	mov     word [cluster], dx	; Refrence the table for file's first cluster
	pop	bx			; get location to write to so we dont screw up the stack
	pop	es
	push    bx			; store location for later again
	push	es</div></pre></blockquote> 
	The above is messy, I know. Remember that AX was set to the entry number by the call to FindFile? We need
	to store that here, but need to keep the buffer to write to on the <b>top</b> of the stack still. This
	is why I played with the stack a little here :)
	<p> 
	Anyways, next we load the FAT. This is incredably easy...
      </p><blockquote><pre><div class="code">	call	LoadFAT			; Load the FAT to 0x7c00</div></pre></blockquote> 
 
	OKAY then! Now that the FAT is loaded, and that we have the starting file cluster, it is
	time to actually read in the file's sectors.
 
      <blockquote><pre><div class="code">.LOAD_IMAGE:
 
	mov     ax, WORD [cluster]		; cluster to read
	pop	es
	pop     bx
	call    ClusterLBA			; convert cluster to LBA
 	xor     cx, cx
	mov     cl, BYTE [bpbSectorsPerCluster]	; sectors to read
	call    ReadSectors			; Read in cluster
 
	pop	ecx				; increment sector count
	inc	ecx
	push	ecx
 
	push    bx				; save registers for next iteration
	push    es
 
	mov	ax, FAT_SEG
	mov	es, ax
	xor	bx, bx</div></pre></blockquote> 
 
	This code is not that bad. Remember that, for FAT12, <b>each cluster is just 512 bytes</b>? i.e., each cluster
	simply represents a "sector". We first get the starting cluster/sector number. We cannot do much with
	just a cluster number though, as it is a <b>linear</b> number. That is, it is the sector number in <b>CHS</b> 
	Not <b>LBA</b> format--It assumes we have the track and head information. Because our ReadSectors() requires
	an LBA linear sector number, <b>We convert this CHS to an LBA address</b>. Then, get the sectors per cluster,
	and read it in!
	<p> 
 
	Note that we pop ES and BX--They were pushed on the stack from the beginning. <b>ES:BX points to the ES:BP buffer
	that was passed to this routine--It contains the buffer to load the sectors into.</b> 
	</p><p> 
	OKAY, so now that a cluster was loaded, we have to check with the FAT to determin if the end of file is
	reached. However, <b>Remember that each FAT entry is 12 bytes?</b> We found out from <b>Bootloaders 4</b> 
	that there is a <b>pattern</b> when reading the FAT:
	</p><p> 
 
	<b>For every even cluster, take the low twelve bits; for every high cluster take the heigh twelve bits</b> 
	</p><p> 
	Please see <b>Bootloaders 4</b> to see this in detail.</p><p> 
	To determin if it is even or odd, just divide by 2:
      </p><blockquote><pre><div class="code">     ; compute next cluster
 
	mov     ax, WORD [cluster]	; identify current cluster
	mov     cx, ax			; copy current cluster
	mov     dx, ax			; copy current cluster
	shr     dx, 0x0001		; divide by two
	add     cx, dx			; sum for (3/2)
 
	mov     bx, 0			; location of FAT in memory
	add     bx, cx			; index into FAT
	mov     dx, WORD [es:bx]	; read two bytes from FAT
	test    ax, 0x0001
	jnz     .ODD_CLUSTER
 
     .EVEN_CLUSTER:
	and     dx, 0000111111111111b	; take low twelve bits
	jmp     .DONE
 
     .ODD_CLUSTER:
	shr     dx, 0x0004		; take high twelve bits
          
     .DONE:
	mov     WORD [cluster], dx	; store new cluster
	cmp     dx, 0x0FF0		; test for end of file marker (0xFF)
	jb      LOAD_IMAGE		; No? Go on to next cluster then
 
     DONE:
	pop	es			; restore all registers
	pop	bx
	pop     ecx
	xor     ax, ax			; return success code
	ret</div></pre></blockquote> 
	Thats all there is too it! Granted a little complex, but not to hard, I hope ;)
 
	<h3>Fat12.inc</h3> 
 
	Great! All of the FAT12 code is in <b>Fat12.inc</b>.
 
	<h1>Finishing Stage 2</h1> 
 
	<h2>Back to Stage 2 - Loading and Executing the Kernel</h2> 
	Now that the messy code is over, all we need to do is load our Kernel image into memory from Stage 2,
	and execute our kernel. The problem is: Where?
	<p> 
	While we do want to load it to 1MB, we cannot do this directly yet. The reason is
	that we are still in real mode. Because of this, we will first need to load the image
	to a lower address first. After we switch into protected mode, we can copy our
	kernel to a new location. This can be 1MB, or even 3GB if paging is enabled.
 
      </p><blockquote><pre><div class="code">	call	LoadRoot		; Load root directory table
 
	mov	ebx, 0			; BX:BP points to buffer to load to
   	mov	ebp, IMAGE_RMODE_BASE
	mov	Esi, ImageName		; our file to load
	call	LoadFile		; load our file
	MOV	dword [ImageSize], ecx	; size of kernel
	cmp	ax, 0			; Test for success
	je	EnterStage3		; yep--onto Stage 3!
	mov	si, msgFailure		; Nope--print error
	call	Puts16
	mov	ah, 0
	int     0x16                    ; await keypress
	int     0x19                    ; warm boot computer
	cli				; If we get here, something really went wong
	hlt</div></pre></blockquote> 
 
	Now our kernel is loaded to IMAGE_RMODE_BASE:0. ImageSize containes the number of
	sectors loaded (The size of the kernel).
	<p> 
	To execute inside of protected mode, all we need to do is jump or call it. Because we want
	our kernel at 1MB, we first need to copy it before we execute it:
 
      </p><blockquote><pre><div class="code">bits 32
 
Stage3:
 
	mov	ax, DATA_DESC		; set data segments to data selector (0x10)
	mov	ds, ax
	mov	ss, ax
	mov	es, ax
	mov	esp, 90000h		; stack begins from 90000h
 
; Copy kernel to 1MB (0x10000)
 
CopyImage:
  	 mov	eax, dword [ImageSize]
  	 movzx	ebx, word [bpbBytesPerSector]
  	 mul	ebx
  	 mov	ebx, 4
  	 div	ebx
   	 cld
   	 mov    esi, IMAGE_RMODE_BASE
   	 mov	edi, IMAGE_PMODE_BASE
   	 mov	ecx, eax
   	 rep	movsd                   ; copy image to its protected mode address
 
	  call	CODE_DESC:IMAGE_PMODE_BASE; execute our kernel!</div></pre></blockquote> 
 
	There is a little problem here, though. This assumes the Kernel is a <b>pure binary file</b>. We cannot have this,
	because C does not support this. We need the Kernel to be a binary format that C supports, and we will need to parse
	it in order to load the Kernel using C. For now, we will keep this pure binary, but will fix this within the next few
	tutorials. Sound cool?
 
	<h1>Demo</h1> 
	<p></p><center> 
	<img src="images/Krnl1.gif"> 
 
	</center><p> 
	Our pure uber-1337 32 bit Kernel executing.
	</p><p> 
	<a href="Demos/Demo4.zip">DOWNLOAD DEMO HERE</a> 
 
	</p><h1>Conclusion</h1> 
	<p> 
	W00t! It's Kernel time!! :)</p><p> 
 
	This tutorial covered alot of new code. Most of the concepts in tis tutorial we have went over before,
	so I hope this tutorial was not that hard ;)
	</p><p> 
	In this tutorial, we covered these concepts in a new perspective, however. This may help understanding
	these topics a little bit more, and to see them being implimented into seperate routines.
	</p><p> 
	We have developed code to load sectors off disk, and parse FAT12 to load our Kernel at whatever location
	we want. Cool, huh? In this Series, we are loading the Kernel at 1 MB.
	</p><p> 
	With a basic full 32 bit Kernel finally loaded and executing, we can finally start focusing our attention
	to the most important part of any operating system -- The Kernel.
	</p><p> 
	In the next few tutorials, we will cover Kernel Theory, Revolutions, and Designs. We will then start covering
	<b>Low Level C Programming</b>, and Low level programming with high level language concepts and theory.
	</p><p> 
 
	There are <b>Alot</b> of freedom when programming C at Kernel Level, that most other programming fields
	do not allow. For example, There still is no such thing as an "Access Violation", so you still have direct
	control over every byte in memory. The bad news: There is also no such thing as a "standard library" either.
	To add more bad news, you still have to remember that you are programming a <b>low level envirement</b>, just
	with another abstraction layer that is C.
	</p><p> 
	We will cover everything within the next few tutorials, and setting up C to work with our Kernel. I cannot wait!
	</p><p> 
	<i>See you there.... ;)</i> 
	</p><p> 
 
	Until next time,
	</p><p>
	~Mike<br>
	<i>BrokenThorn Entertainment. Currently developing DoE and the <a href="http://www.brokenthorn.com/mos/site2/">Neptune Operating System</a></i>

	<br><br>
	<i>Questions or comments? Feel free to <a href="mailto:neon6000@aol.com">Contact me</a>.</i>

	<br><br>
	Would you like to contribute and help improve the articles? If so, please <a href="mailto:neon6000@aol.com">let me know!</a>

<br><br> 
<table width="100%" border="0"> 
<tbody><tr> 
<td><p align="left"> 
<a class="anchor" href="OSDev10.html"> 
<img src="images/left.jpg" border="0"></a> 
&nbsp;&nbsp;
<a class="anchor" href="OSDev10.html"> 
<font size="4">Chapter 10</font> 
</a> 
 
</p></td> 
<td> 
<p align="center"> 
<font size="4"><a class="anchor" href="OSDevIndex.html">Home</a></font> 
</p> 
</td> 
<td><p align="right"> 
<a class="anchor" href="OSDev12.html"><font size="4">Chapter 12</font></a> 
&nbsp;&nbsp;
<a class="anchor" href="OSDev12.html"><img src="images/right.jpg" border="0"></a> 
</p></td> 
</tr> 
</tbody></table> 
 
 
 </p></td></tr></tbody></table></body></html>Ytext/htmlUUTF-8_1http://www.brokenthorn.com/Resources/OSDev11.htmlP•$‘_WebResourceResponseO
Ø.mozilladummy {
	FONT-SIZE: 12pt
}
.title {
	FONT-WEIGHT: bold; FONT-SIZE: 19pt; COLOR: #003e98; FONT-FAMILY: Verdana
}
.subtitle {
	FONT-WEIGHT: bold; FONT-SIZE: 16pt; COLOR: #003e98; FONT-FAMILY: Verdana
}
.author {
	FONT-WEIGHT: bold; FONT-SIZE: 13px; COLOR: #000000; FONT-FAMILY: Verdana
}
.code {
	FONT-SIZE: 13px; COLOR: #000088; FONT-FAMILY: Courier New
}
.vbcode {
	FONT-SIZE: 11px; COLOR: #000088; FONT-FAMILY: Courier New
}
.codecomment {
	FONT-SIZE: 13px; COLOR: #008800; FONT-FAMILY: Courier New
}
.codekeyword {
	FONT-SIZE: 13px; COLOR: #0000ff; FONT-FAMILY: Courier New
}
BODY {
	FONT-SIZE: 13px; COLOR: #000000; BACKGROUND: #FFFFFF; FONT-FAMILY: Verdana
}
DIR {
	FONT-SIZE: 13px; COLOR: #000000; FONT-FAMILY: Verdana
}
BLOCKQUOTE {
	FONT-SIZE: 13px; COLOR: #000000; BACKGROUND: #CCDDDD; BORDER: 1px dashed #999; FONT-FAMILY: Verdana
}
P {
	FONT-SIZE: 13px; COLOR: #000000; FONT-FAMILY: Verdana
}
OL {
	FONT-SIZE: 13px; COLOR: #000000; FONT-FAMILY: Verdana
}
TD {
	FONT-SIZE: 13px; COLOR: #000000; FONT-FAMILY: Verdana
}
DL {
	FONT-SIZE: 13px; COLOR: #000000; FONT-FAMILY: Verdana
}
UL {
	FONT-SIZE: 13px; COLOR: #000000; FONT-FAMILY: Verdana
}
DD {
	FONT-SIZE: 13px; COLOR: #000000; FONT-FAMILY: Verdana
}
.tblhdr {
	FONT-WEIGHT: bold; FONT-SIZE: 10pt; BACKGROUND: #666699; COLOR: #ffffff; FONT-FAMILY: Verdana
}
.maintext-1 {
	FONT-SIZE: 12px; COLOR: #000000; FONT-FAMILY: Verdana
}
.maintext-2 {
	FONT-SIZE: 11px; COLOR: #000000; FONT-FAMILY: Verdana
}
.caption {
	FONT-WEIGHT: bold; FONT-SIZE: 11px; COLOR: #000000; FONT-FAMILY: Verdana
}
.inlinebox {
	BORDER-RIGHT: #000000 1px solid; PADDING-RIGHT: 10px; BORDER-TOP: #000000 1px solid; PADDING-LEFT: 10px; BACKGROUND: #ccddee; PADDING-BOTTOM: 10px; BORDER-LEFT: #000000 1px solid; PADDING-TOP: 10px; BORDER-BOTTOM: #000000 1px solid
}
H1 {
	FONT-WEIGHT: bold; FONT-SIZE: 22px; COLOR: #00983e; FONT-FAMILY: Verdana
}
H2 {
	FONT-WEIGHT: bold; FONT-SIZE: 18px; COLOR: #3e0098; FONT-FAMILY: Verdana
}
H3 {
	FONT-WEIGHT: bold; FONT-SIZE: 15px; COLOR: #800040; FONT-FAMILY: Verdana
}
A:link {
	COLOR: #666699; TEXT-DECORATION: underline
}
A:visited {
	COLOR: #666699; TEXT-DECORATION: underline
}
A:active {
	COLOR: #000000; TEXT-DECORATION: none
}
A:hover {
	COLOR: #aaaadd; TEXT-DECORATION: none
}

.anchor {

	text-decoaration: none;
}

.anchor:link {
text-decoration: none;
color: ##00983e;
font-weight: normal;
}
.anchor:visited {
text-decoration: none;
color: ##00983e;
font-weight: normal;
}
.anchor:hover {
text-decoration: none;
color: ##00983e;
font-weight: normal;
}
.anchor:active {
text-decoration: none;
color: ##00983e;
font-weight: normal;
}
Xtext/css_8http://www.brokenthorn.com/Resources/Files/reference.cssO∑bplist00‘
X$versionY$archiverT$topX$objects Ü†_NSKeyedArchiver—	_WebResourceResponseÄØ''-.4567YZ[\]^_`abcdefghijklmnopqrstuyU$null› !"#$%&___nsurlrequest_proto_prop_obj_6___nsurlrequest_proto_prop_obj_3R$2___nsurlrequest_proto_prop_obj_0R$3___nsurlrequest_proto_prop_obj_4V$class___nsurlrequest_proto_prop_obj_1R$4R$0___nsurlrequest_proto_prop_obj_5___nsurlrequest_proto_prop_obj_2R$1ÄÄÄ	ÄÄ&ÄÄ Ä”()$+,WNS.base[NS.relativeÄ ÄÄ_8http://www.brokenthorn.com/Resources/Files/reference.css“/012Z$classnameX$classesUNSURL¢13XNSObject#A¬˛kŸÎÄ, »”89:IXWNS.keysZNS.objectsÆ;<=>?@ABCDEFGHÄ	Ä
ÄÄÄÄÄÄÄÄÄÄÄÄÆKLMNOPQRSTUVWÄÄÄÄÄÄÄÄÄÄ Ä!Ä"Ä#Ä$Ä%\Content-TypeZKeep-Alive]Last-Modified_Content-EncodingVServerWExpires]Cache-ControlTDate^Content-LengthZConnectionX__hhaa__TEtagTVary]Accept-RangesXtext/css_timeout=2, max=99_Fri, 24 Jul 2009 23:28:20 GMTTgzipVApache_Mon, 12 Apr 2021 10:13:13 GMT_max-age=2592000_Sat, 13 Mar 2021 10:13:13 GMTS607ZKeep-Alive_‹

YnBsaXN0MDDdAQIDBAUGBwgJCgsMDQ4QEhQWGBocHiAiJCZcQ29udGVudC1UeXBlWktlZXAtQWxpdmVUVmFyeV8QEENvbnRlbnQtRW5jb2RpbmdWU2VydmVyV0V4cGlyZXNdQ2FjaGUtQ29udHJvbFREYXRlXkNvbnRlbnQtTGVuZ3RoWkNvbm5lY3Rpb25URXRhZ11BY2NlcHQtUmFuZ2VzXUxhc3QtTW9kaWZpZWShD1h0ZXh0L2Nzc6ERXxARdGltZW91dD0yLCBtYXg9OTmhE18QGkFjY2VwdC1FbmNvZGluZyxVc2VyLUFnZW50oRVUZ3ppcKEXVkFwYWNoZaEZXxAdTW9uLCAxMiBBcHIgMjAyMSAxMDoxMzoxMyBHTVShG18QD21heC1hZ2U9MjU5MjAwMKEdXxAdU2F0LCAxMyBNYXIgMjAyMSAxMDoxMzoxMyBHTVShH1M2MDehIVpLZWVwLUFsaXZloSNfEBgiYWFmLTQ2ZjdiZjVhOTBkMDAtZ3ppcCKhJVVieXRlc6EnXxAdRnJpLCAyNCBKdWwgMjAwOSAyMzoyODoyMCBHTVQACAAjADAAOwBAAFMAWgBiAHAAdQCEAI8AlACiALAAsgC7AL0A0QDTAPAA8gD3APkBAAECASIBJAE2ATgBWAFaAV4BYAFrAW0BiAGKAZABkgAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAAGy_"aaf-46f7bf5a90d00-gzip"_Accept-Encoding,User-AgentUbytes“/0vw_NSMutableDictionary£vx3\NSDictionary“/0z{_NSHTTPURLResponse£|}3_NSHTTPURLResponse]NSURLResponse    $ ) 2 7 I L b d é î Ø — Û ˆ=Dfilé∞≥µ∑πªΩø¡√ƒ∆» Ã”€ÁÈÎÌ(-8AGJS\^`gozâãçèëìïóôõùü°£•¥∂∏∫ºæ¿¬ƒ∆» ÃŒ–“ﬂÍ¯(-<GPUZhqÖ•™±—„Ú*05KO\auyç             ~              õ‘O<kâPNG

   IHDR  w   G   sØê∞   	pHYs     öú  
OiCCPPhotoshop ICC profile  x⁄ùSgTSÈ=˜ﬁÙBKàÄîKoR RBãÄë&*!	Jà!°ŸQ¡EE»†àééÄåQ,ä
ÿ‰!¢éÉ£àä ˚·{£k÷º˜ÊÕ˛µ◊>Á¨Ûù≥œ¿ñH3Q5Ä©B‡É«ƒ∆·‰.@Å
$p ≥d!s˝# ¯~<<+"¿æ x” ¿Mõ¿0áˇÍBô\ÄÑ¿të8KÄ @zéB¶ @FÄùò&S † `Àcb„ P- `'Ê” Äù¯ô{ [î!†ë  eàD h; ¨œVäE X0 fKƒ9 ÿ- 0IWfH ∞∑ ¿Œ≤  0QàÖ) { `»##x Ñô FÚW<Ò+ÆÁ*  xô≤<π$9EÅ[-qWW.(ŒI+6aaö@.¬yô2Å4‡ÛÃ  †ë‡ÉÛ˝xŒÆŒŒ6é∂_-Íøˇ"bb„˛Âœ´p@  ·t~—˛,/≥Ä;Äm˛¢%Óh^†u˜ãf≤@µ †È⁄WÛp¯~<<E°êπŸŸÂ‰‰ÿJƒB[a W}˛g¬_¿W˝l˘~<¸˜ı‡æ‚$Å2]ÅG¯‡¬ÃÙL•œí	Ñb‹ÊèG¸∑ˇ¸”"ƒIbπX*„QqéDöåÛ2•"âBí)≈%“ˇd‚ﬂ,˚>ﬂ5 ∞j>{ë-®]cˆK'Xt¿‚˜  Úªo¡‘(ÄhÉ·œwˇÔ?˝G†% ÄfIíq  ^D$.T ≥?«  D†Å*∞AÙ¡,¿¡‹¡¸`6ÑB$ƒ¬BB
dÄr`)¨ÇB(ÜÕ∞*`/‘@4¿QhÜìp.¬U∏=p˙aû¡(ºÅ	A»a!⁄àbäX#éôÖ¯!¡Hã$ …àQ"Kë5H1RäT UHÚ=r9á\F∫ë;» 2Ç¸ÜºG1îÅ≤Q=‘µCπ®7ÑF¢–dt1öè†õ–r¥=å6°Á–´h⁄è>C«0¿Ë3ƒl0.∆√B±8,	ìcÀ±"¨´∆∞V¨ªâıcœ±wÅE¿	6wB aAHXLXNÿH® $4⁄	7	ÑQ¬'"ì®K¥&∫˘ƒb21áXH,#÷è/{àCƒ7$âC2'πêI±§T““F“nR#È,©õ4H#ì…⁄dk≤9î, +»Ö‰ù‰√‰3‰‰!Ú[
ùb@q§¯S‚(R jJÂÂ4Âeò2AU£öR›®°T5èZB≠°∂RØQá®4uö9ÕÉIK•≠¢ï”hh˜iØËt∫›ïNó–W“ÀÈGËóËÙwÜÉ«àg(õgwØòL¶”ã«T071ÎòÁôôoUX*∂*|ë 
ïJï&ï*/T©™¶™ﬁ™UÛUÀTè©^S}ÆFU3S„©	‘ñ´U™ùPÎSSg©;®á™g®oT?§~Y˝âY√L√OC§Q†±_„º∆ c≥x,!k´ÜuÅ5ƒ&±ÕŸ|v*ªò˝ªã=™©°9C3J3W≥RÛîf?„òq¯útN	Á(ßóÛ~äﬁÔ)‚)¶4Lπ1e\k™ñóñX´H´Q´GÎΩ6ÆÌßù¶ΩEªY˚ÅA«J'\'GgèŒùÁSŸS›ß
ßM=:ıÆ.™k•°ªDwønßÓòûæ^ÄûLoßﬁyΩÁ˙}/˝T˝m˙ßıGX≥$€Œ<≈5qo</«€ÒQC]√@C•aïaó·Ñëπ—<£’FçFåi∆\„$„m∆m∆£&&!&KMÍMÓöRMπ¶)¶;L;L«ÕÃÕ¢Õ÷ô5õ=1◊2ÁõÁõ◊õﬂ∑`ZxZ,∂®∂∏eI≤‰Z¶YÓ∂ºnÖZ9Y•XUZ]≥F≠ù≠%÷ª≠ªßßπNìN´û÷g√∞Ò∂…∂©∑∞Âÿ€Æ∂m∂}agbg∑≈Æ√ÓìΩì}∫}ç˝=áŸ´Z~s¥r:V:ﬁöŒúÓ?}≈ÙñÈ/gXœœÿ3„∂À)ƒiùSõ”GggπsÉÛàãâKÇÀ.ó>.õ∆›»Ω‰Jtıq]·z“ıùõ≥õ¬Ì®€ØÓ6ÓiÓá‹üÃ4ü)ûY3s–√»C‡QÂ—?üï0kﬂ¨~OCOÅgµÁ#/c/ëW≠◊∞∑•w™˜aÔ>ˆ>rü„>„<7ﬁ2ﬁY_Ã7¿∑»∑ÀO√oû_ÖﬂC#ˇdˇzˇ— ßÄ%gâÅAÅ[˚¯z|!øé?:€eˆ≤ŸÌAå†πAAèÇ≠ÇÂ¡≠!h»Ïê≠!˜ÁòŒëŒiÖP~Ë÷–aÊaã√~'ÖáÖWÜ?épàX—1ó5w—‹CsﬂD˙DñDﬁõg1O9Ø-J5*>™.j<⁄7∫4∫?∆.fYÃ’XùXIlK9.*Æ6nlæﬂ¸ÌÛá‚ù‚„{ò/»]py°Œ¬ÙÖß©.,:ñ@LàN8îA*®å%Úw%é
y¬¬g"/—6—àÿC\*NÚH*MzíÏëº5y$≈3•,ÂπÑ'©êºLL›õ:ûöv m2=:Ω1ÉíëêqB™!Mì∂gÍgÊfvÀ¨eÖ≤˛≈nã∑/ï…k≥ê¨Y-
∂B¶ËTZ(◊*≤geWføÕâ 9ñ´û+ÕÌÃ≥ €ê7úÔüˇÌ¬·í∂•ÜKW-XÊΩ¨j9≤<qy€
„+ÜV¨<∏ä∂*m’O´ÌWóÆ~Ω&zMkÅ^¡ Ç¡µkÎU
ÂÖ}Î‹◊Ì]OX/Yﬂµa˙Üù>âäÆ€óÿ(‹xÂáo øô‹î¥©´ƒπdœf“fÈÊﬁ-û[ñ™óÊónŸ⁄¥ﬂV¥ÌıˆE€/óÕ(€ªÉ∂Cπ£ø<∏ºeß…ŒÕ;?T§TÙT˙T6Ó“›µa◊¯n—Ó{ºˆ4Ï’€[º˜˝>…æ€UUM’f’e˚I˚≥˜?Æâ™È¯ñ˚m]≠NmqÌ«“˝#∂◊π‘’“=TRè÷+ÎG«æ˛ùÔw-6Uçú∆‚#pDy‰È˜	ﬂ˜:⁄vå{¨·”vg/jBöÚöFõSö˚[b[∫OÃ>—÷Íﬁz¸G€ú4<YyJÛT…i⁄ÈÇ”ìgÚœåùïù}~.˘‹`€¢∂{ÁcŒﬂjoÔ∫t·“EˇãÁ;º;Œ\Ú∏tÚ≤€ÂW∏WöØ:_mÍtÍ<˛ì”O«ªúªöÆπ\kπÓzΩµ{f˜Èû7Œ›ÙΩyÒˇ÷’û9=›ΩÛzo˜≈˜ıﬂ›~r'˝ŒÀªŸw'Ó≠ºOº_Ù@ÌAŸC›á’?[˛‹ÿÔ‹j¿w†Û—‹G˜ÖÉœ˛ëıèCèôèÀÜÜÎû8>99‚?r˝È¸ßCœdœ&û˛¢˛ÀÆ/~¯’Î◊Œ—ò—°óÚóìøm|•˝Í¿ÎØ€∆¬∆æ…x31^ÙV˚Ì¡w‹wÔ£ﬂO‰| (ˇh˘±ıS–ß˚ìììˇòÛ¸c3-€    cHRM  z%  ÄÉ  ˘ˇ  ÄÈ  u0  Í`  :ò  oí_≈F  1ñIDATx⁄Ï}Wó]◊yÿ>ΩﬁﬁÀÙÅÄdä¢h«é%/∑ÿ~â˝úWˇ Ø¨ïá¨¥óºƒâ/+≈IÃ8ñ,ä%äIê ï`Ä©wÊñπΩû^Û∞1wÓΩ3sßAË~\‡ôs˜ﬁﬂ˜ÌÛÌØoƒ4Mp§`YV£—¯¡~∞ºº¸›Ô~wll,"^Q0£Ÿlnll\ø~=óÀiöÜaM”—htfffjjäÁyóÀÖa¿ ~%?ÚQÂ8nzz˙¡É˜Ó›c∆Âr—4˝Jíœ4ÕF£±¥¥tˇ˛˝L&£Î:1CCCó.]‚8é¢(E[m )s§É‚¯‰‰d<ÙË—0M”„„„ØﬁanYñ sssÖB¡0AÇH&ì_˙“óFGGÜ°(j∞…+«r∆¢(Íız/_æ¨Îz*ï⁄‹‹TÂ’1í$---›æ}ªX,Ü `fzz˙ı◊_O&ì,ÀDÃ p\R @ƒŸ≥g'&&ä≈¢(äØò°‘jµñóóo‹∏ëœÁu] –4=55ı⁄kØù:u*í$9ÿ^¿qYL  A<œÎØø˛Ÿgü’j5]◊£—®œÁ{ŸÈe€∂ÆÎ’jıÈ”ß’jï¢(hMLLLMMù:uä à¡∆¿ é]ó[ﬁôd2Y´’L”¸≈/~a€ˆÀÆ¬Hí¥ºº¸Èßüﬁºy3óÀ©™jYé„cccgŒú!IÚ®` 'Hó †(ÍÛ˘âD©T⁄‹‹åD"ä¢ê$˘Ú∫ÅEQL•R˜Ôﬂœf≥í$YñÖaX òôôüòòÑ´0Ä™À@W≈¯¯∏ÀÂ*ãÂr˘ß?˝©eY/©SØ◊óññÓﬁΩõ…d†à!b||¸ ï+gŒúôööàò‡ó ePÖB###8éãEUU5M{Èçm€çF„È”ßÛÛÛπ\NQÀ≤PM$ÁŒùK&ì+i ¯ÂH®Œåçç˘|>M”J•“«¸ryg$I Ârè=z¯!…õ¶Iíd"ë∏p·¬»»H4àò`¿è{√b±ÿƒƒD≠V+óÀÅ@@QñeO˛ói€vπ\ŒÁÛÀÀÀŸl∂ŸlBCD"ëÄywØ@‘l xÈu∞ï´è«-À⁄‹‹ºq„∆ëO9ò¶π∞∞·√œ?ˇ|qq±R©Hí‰h1ØΩˆ⁄¯¯¯@ƒ` 'BóÅÍL4ùúú¨’jÇ 
UU1Î©Œ¨,=Œf÷{é395Oé”"Án\ìe	Í0ñe’™îÚ>yÚDUU]◊°/â$…d29;;;22‚Òxédﬁ]Ì œ^|˝≠ÁÎl{x¬7Yü8û:5éçº™_Z.≥æºÙ Â_{õ§ËÅî9uf||<ùNßR©l6˚˘Áüøı÷[8éwöfΩt˜∆(Çh∫ﬁ˛\◊çüø˜˜ëXÚ;ø˚'√£”Gæ¬r>ùZy§®‘≥æ˙Âã›Y¡Ò"!á'&&.]∫tÑyΩôtÍÁ?˛{èáﬂÛÕØ~˘¢$ΩæÙ‰ãr~C7∏0¯ê¢®ì·⁄âßÌ039™èƒU5Jƒ+Y\˙◊˘ÔdY
|>yÍ¬◊~•R7_êîA$LMMïÀÂf≥ô…dÊÁÁ/\∏–-efœŸT"wbf°T˝≈èˇˆ7~ÁO#±·#‹ã¢(Nûyù•,ø˚yÂ—‚‚b p
M”…dÚÚÂÀGõwá"»©È±Ûg&˚y9ïJ}ÂÕoÂWÁxñlòL&›n˜â›dª¥JÂ≤E√·´Wˇµ≤Ùÿ÷ÔÁ¶iÌôÉÚWßa3¡~©TJ≈B°P≠V√Ë&¥eY¨o,ÛÙ≥Xƒ˚\æò6é!8é%b!Ü¶ñ|H3ﬂÒ˙áˇ⁄M”¥m[í§Ô}Ôø⁄¶¸ˆ’©d<¸l”óJ.óÀY°€Ìvª›4M≠ﬂ∫›Eeò∂iŸÒ\zää…—œïîµµµââ	—ÚËıÇœÎv˙|æì,ezÚ¥!ö8⁄±´îÀÓÛ˘|˚í2≤,˝‡ùøë%ix8˘çﬂ¸£„Xˇ·ß@ ‚Û∫p√qÿf*ïbÊê2}RÊ≈©¶ÇxΩﬁââ	óÀ•i⁄˙˙˙ì'O∫sgHíÙBuØ‘Œ√ne6K"|ŸÎqëöY{(I“!?o]◊E˘—è~Ùèˇ¯è≠VÎ—£«kÎŸ6
 éÄãgYˆ»ìˆ∏~æ,n‰ÖvƒÔ.îr˘íÛøÇ †(JRÃì•T˚CX~b°'OoÕÁo=*ßr5áKß eRÛn≥∏vÉF£°Ôlî¬•rÿ)l`„8∂•í[≈bQñÂW¬Ÿ‘e–.´ƒPÂòrÁ`π`0à¢h±Xt&¥Üa~øüeπlÆ‘˛√\’‹»  (ä 0§Rπ\>ÿñjó/Ôæ˚n©T f≥cÿÂW<œü={ˆXÇlJ≤“é∏ç‡k≈ˆw(äÚy}ÜaæD{±'OÜI$µ¶ë/T9~<ö=5 XZZ·8P8‰ëh‚µÛßüù%UY”¥ìf=B †›_‡√áóññ©)Ï§Œp722¬0åÆÎkkk;©3,√¥?qª›SßJµgK¢)GÌÕÕÕ˝¶i™™*¬¯√wﬂ}∑Ÿl¶R©L&£(
œÛª8zÇ¡‡hÊ (6äns
∫\.Ü˜5öœôá¢(IΩ|öv7O].◊‘‘‘ÏπK•JÌ0#Üanm!X¸q‰ã?¸$≈°ŸÕ™π∏—X…
/u5ﬂ(Éwö¶a˙Ÿq,ÀÂrE"ë`0(Àr•R…f≥<œèççuË»ˆû¢®X,ñO+µF¿ÁÅ‚@ley¨ƒˆù˙‡É™’jΩ^∑m[ñeUUùØwó`€äc›∫aŸÅ†¶Ω˝„$i•ZÒ∏˘ó}Gvî üœÁÒåﬁø˘˛aÜÕ¶S@õÎ8t√OÅaò€∂≤≈Ü¨¯|Åp8Ãlóπ/)ÙIºõ<œollÇ‡vªè‹@@Q‘„Ò$âZ≠÷jµVWW˝~ˇ0é„{Ü^_®Z^	¯<éﬂDñeXR¥ìp±∂‡'?˘	 @í§b±X©TˆUÂÄ é„«›∫∏“P(ä¬QM€>u8:¥˛$^Q†i⁄Ì+äJ”å+-Ãﬂ<«∫»√OÅaòœÁõûûÉ8éG"ñe_ˆıIº[
∏\.AÚ˘ºﬂÔ?râÎM˘|^ñÂZ≠ñJ•Xñ=sÊÃÓ⁄Ç (ä ≤⁄Æ≠…≤lÜa™™¬¿A√∞,À∂Ìè>˙»≤,EQi6õ≠VÀ4MóÀel¡.Áä¢4Mª\.Ç †ú6Ms'u∆∂ÌCJdA2X÷ãZ@€˛‹å>ñµWU «ãÂı·dÙ ?ˇ¯√˜6sØÕæ h	é^A8™)XñM&ì·pAí$_Å|ô˛)”CÉÄÕﬂJ•R£—8é˛˚4MC˝•\.◊Îıııı`08==Ωg¸›˛[ñyÛ˙œ?¸ÈˇEAQUÀ¥,€r{Çö““ã˜Ñi÷Õ0L´’íeAC5πn€  ¡pöıí$€HÍrk0≥ﬁ™à8é∑*©ı•{ó^;˚øÛßPö¨,=ûªqMñ$ @"9Ú÷7˛)E?£Ú˚Ôæ”ëÍzˆ¬Â˘∑·ø'¶gøˆˆovO'kv8ËRE≠[â„\~M◊…^˚≤ﬁh)Ç˙£ˇ˜}ö¢wº}µ˛@Ë¸≈+cßúøv/xbzveÒ1√≤ﬂ¯ˆwCëƒ¡0ÍÛ‘ù∫umﬁë2◊>¯Qπ∏Ÿœ\˝óˇ~eÈÒ≈s3n –t}ÿá4JkCCC;·æ'ß:?¿˛@ËÎﬂ¸mè◊øy£·¿o˛ÓüÌwüÏ¥T¯Ô◊ø¸÷ƒÙÏ‹çkŒì◊.]Ω¯˙Wwﬂ	áŸ∑}RÊô*˜Ò\∑,¶¥¿–¿û∂Ã6¸oµZm4ä¢ÿ∂’HGH≠.∂ÍÖH¯´JM044T≠⁄ÆlTDıªâH¿ÙÛëê«ÔÊ(‹¢$‡e√>:[®g≥õP+E]*∫yjj,ziÜÑa8AÛ4Ms«≤l≥^ãG<#C18˛ü‹?j¯µ≥A??6Ω|a
«I… yûøw˚˙ˇ˙oˇISZ!KbV.ìöøchtí„› Äµ•à—t18â[4	Ä•m¶W©Ù1®≠g÷óe°ñùÅ‚;µ∫H ≤€≈•
z2ô‘dA*ÌàèååËö"4ä.ûÉt–5emÈ!\ß¶∂!∂ıûÉCòªqÕY-çÉzµË¡úœÁÛüUìw,µıJ!≠´"0ïRn5öú»Æ/¢f´OåvÇû<ıx<$≈‹øs=5Eìqt±åŸB?s·@Kxcë‡3eÅ°1∑?√πù‚v‹˜‰T‚Ò°)é¡ˆú‚˝wﬂ˘¡;ﬂw»[-o>z0742¡rÓû‰M(wE—ç’˘˛˜Iœ•ö‰˜Pñ°>~xÁ∆g◊}q«√~,-ΩæHQî?ﬂi'rﬂˆC¸›t«9é≥m;óÀ%	ä¢é‹;’ÿ¨≥Z≠¬W=ìÙ:¸,PÅêœoﬁπˇ¯èæ˚∆‘x¨∑éÍV˛˚ﬂΩ˛¸˘zΩÜ≠ŸôÒs≥œSl[ÇdŸHMÛû=wÅÁy√Ó‹öYöˇÙ˘¯≈ „•Ù≈Û”0OØ)(ˇ˙?˛Ô_{„Õﬂˇ˝ﬂ{ˇ›w:F´÷öŸï{,ÔcYˆÚØ}{~ÓßÆ∑m•™AËŸç≈Xr™Õ·êØ!ö$IÚ<ﬂ™a›Ü[(íxêzèÜ∫Gsª8∑ãIÏ4∏,K›´m	R-ˇ¥ˆ˘ÜÌæ‡\Í—π/Ωµ2Õ√·}b¥/†(ä˜<GÌÏóæñZ∏ﬁıÜß.ﬁ˘¨@¶ìä≤æ)⁄dÅ·˝###ÜıƒΩNe÷b”•b~ó)~Œ˜Án\˚£ﬂ˝v˚À’˙ ¸',ˇ]é„Èûeqqqrrr_˚d˜ó-À2L≥]€%≈sïr1C3ˇê‘ËXœûƒﬂ∂á{z™Xñ%I≤—hîJ•„p⁄CÔÃÿÿX<'IR◊ıl6ª∫∫∫˚ØÚπ¥É ¿¥¨ZΩ˘˛«2πm%ü›Y% @b&AÂrYïjâüû ¨mlñ*  «28Ü$¬úﬂÔÖB–àÎ†C≠!,Ø=Ûº˛Ô¯˘fæò…dÊ>ˇ≠‹–” <ÉŸRf}IUU#T‡ÈX’zAﬁ˙®HEÛŸTΩ^∑,ÀÁuì!)&ºØßﬂ'û››më⁄îzè/€2·jŸTT‚n[FfıQ =ú))5°Q.ÀÇ¡ıâQˇ€†Ÿ®}Ú·{b≥:=}Íy
¡˙§ ¿Dÿ•’ç6:¶i¢(Í(2‡T;‚•RI1©ù¶òp˚—É[Ùªﬂ∂Z®€O7D¯Cø◊Õ3ÿ∆Í<º ®{ÿ—u_˚§ÁÀuAwé"(bö“3Ûü°)`õÈ‘ÛñÉQc«ı†ËÓƒﬂC ¿`∂ÀÂRÂ¯í	Çá√…d:õK•R.ó€=|.Àœ=˜Ãœ/¨˘˝˛p(“û∞˚‡Ò∆ø˙∑ˇ˘_˛õø é¢®$I.ùöÜÍÉèÔﬁ∫øR©5`v–j’jıYvﬂvç-˚Ωºm=ãF]ª~œ„Ò0≥ëZM¿—Ó=)=]+ã¢y\-¶õÕ&EQ,«µØ*Sñ7Í˜r∫˛,—T0´09<Æ°æñÇ∏\.Üaz™çÔÚE&sïﬁ	æôÇ∞íiÙ 0˜˘GÓõÕµ\À¡›R´ïJE◊uö¶ª¸d≠˙hµ  P£—h8Ÿ'F˚àP<º˝Œ5Y(Ö‚c-ç—LÍπ}R«qüﬂ_Æ‘üä„b±X0Ñ*’√˚∑¿©vƒõÕ&œÒ;M—,ßæÛOﬁ‘mÊãU˘…Zπ“‘<…	¢?≥z9_´’,ÀÍ∆H”4€∂˚«t'Õ/WWSmŸÍ™qkæ∞≤û †( h5JçF~V£∆NÎafw‚Ô-eHíÙ˘|8ég2ôıııc ù!¬	cIí¥≤≤íJ•vJñWUy}mëÁüIôR•UØ◊	Ç »m(}67œ0L±*˛‚”{∑,˙|æØΩ˘b[c#q¯Ô	£√k©, Ä¶H≥ãÖﬁŸ}ì„>7ùàá w.[6áiä[ı°D∆ûYñUt=˝Ã[iÍbµZ x‹€¬{≈öÍÛ˘tM9oöfΩ^WUïÊ|(¢XÔ.ı;A∏C„*pÒ<ﬂÌ&€ej•‘j‘‹eÕVM¨wí${.ÿÌèUª“‘EaX¶œI˚’gÅ˝x˛Œõ_πXØ’$YGËNyHí§(™OÍô¶…s|G'√Yñ6≥„îÉ∏$IV|˚ß/ºa3CO”¢¢j±XÏÙÈ”≈•≥Ö-3F.óÀ™™vì◊ÒÎ˜øOzæLPÏ‚ FõPYñMeJ-·ôn´*
L¸?5zÆ«Ò]àø∑îÅ€ñÌÇP´’4ÌX"©0TLí§eYÜa‰Û˘7n§”Èû9Åèﬁah⁄IñYL“È4åa∑øˆ‡—r"ëxÎ≠∑ √∏‰€oø=6:ƒÛ≥ïéü©5Z`+Ø’(uÁ,ÜyÓÙœ±—p  ≥ènÅp8Ïq≥<«Bø:Ø◊ç&- `Y6∞≠zΩÆiÜo3|$I$>Øœâƒ€ñ-Ií¶i$I¬ÜâDbßî√`	ÿÿÿ«q›ej•ÿéªa±ƒhO‹ªúL&Oü>Õ&´e€6äˆãQ?¨W51E`[ Ärπ‹h4Ç¡‡¯¯x("I≤Í!(“A(ß	F.ì:ß:»éS†´ö«q.\8wÓú◊Á”4›Òï4∏?;fy>æ™vø<44‰L U+âê%Àä„UÄŸ¶∆.ÎŸÖ¯{G≤°:KêÛ˘|≠VÀf≥„„„«—ıŒÇ¢®eY™™.//À≤|·¬Öïï~KG©’õ™†>\∏wÒ‹Ã÷5~¸≥œHídE–éøÚïØ¸Òˇ±«„…f≥ÜÂ3À.˛˘óÈrπB°–∂: SÜ}∂K√√"£√1 Ä¨hs˜ûû:u*
°àÂﬁ*ÜFƒÂrπ=,Õ0Gî$©€jÄbﬁ“ö“ñÇifÎ
Ö†Ê∏ãÎfHC_iˇÉg”ÎÌ∏S’ÓŒòâD¬ÁÛ°(äaò©K}N⁄ﬂ›`	ub4’XÇ7°VãaX76W6ùÚîSª ﬁ·∑é≈b∞ ﬁÎıí$Y-ú|À≤5U›W!Îæ0eY6›Ê≠#	2ñ≥d{ÃJ=5ÃÂΩ•EQ0yø^ØKít-¡¡0å¶iÇ `<[”¥çççrπúZûÛ È-≈
è˘uÓ‹ÃÙ‰ @”Õø˙€ü=ú<99Ÿ}∞_æ|˘˛‡&''M”ÑÈïï¬:œ=”ˆ+Ö$)∑€E-ÀÜ∂´iò¢(vê«ÒÄóqsQ ¿Õªè
ÇV≥Ú8J?é„éÜ&Æ¢(›‹"I“Ârï{Â@˚tœ
)ËíÔ˘ß]∑m´wÇËwgL»ö©©) @z}πœI˚Ü°¢$ÚÛÃGÑ à ∏{DícÈÉqjƒ;§L$Åy(äŒ›∏ˆÙÒ˝∑ﬁ¯íC~ò}ﬁˇö˜Ö)IíÂ5ÅÛ<è¢»—R£|Ë\ñè„8œÛE	ÇpL”÷ó`wê£^Ø+[* ÄÁX«rÅ˘?πÕMxãœÁci —yyvv÷ÂrAG7<kï≤c(" !Ç %ÕîÓ8fC≠r;˙éc–÷XYœ˚˝~é„$I“§é˚ª”⁄\‘r7∑PÌŸ®œùØîä¿›≥ùåù±…√aÑ¢(â¢Ä8,Çª@.≥éo◊ˇ˚Á‘.àwËh^0§}ÓÙ§≥Qèñï;Ωº}=(ÜaùQåCS„˚ﬂÜaÇ0√4M£:⁄Ôƒ∂mEQdYÓ_äYñ-KÚø¯≥ﬂ˘—áÛ_∫|evvVïõÁ~ﬁæÏÆpi5Ë·⁄√gA 8nsä@t]ﬂ…√≠VS###4Mõ¶iZÜ◊ÛÏ —5P¿2-µÕ66∂zeû8$Ó/5Ë∫oqJ7 yåúÇ"Ê◊Æ\JD‘ÿáîAÑeYÜaAhµZÈtz||¸hÁ6Ms}}Ω\.ÔπÀo?.Mèx‹â¢H¿ÔïıèÔ7fŒøü<‹C‰c(ÀPÌ∫"Ç Hõº∑m€‹Ÿ‘ÃÑKó.Ò<üNßeYFlõ¿1ËnµπïåÆÎœu—áƒ˝X°“P¸nÍ¯˙ı  q8%¥ŸB˙ò8ıÒáÔÕ›∏ˆ÷_:ås‹¬®±?)∂
öt]ØV´…dÚÅ€µ´^Øonnˆ#eZ≤µ∏—
¢ëêjT,°ä¢ÿœE{Jh€ö¶Ì‰•C1¬·ıÎ◊≠≠—PMDnûQ5∫ÓO ˜cÖbU—!∫ï¢~Ù∏ÉÁúäG¸.é>N≠,=~ˇ›w.ûõâÜ¶ißãbÃOR'Ø–ã°∆AtÇ `'mAt]?BÖ
˘666dYﬁsdûÁ„âDzu.Ú häDQ;øôÓÎF§ΩWm√ÓÓ?(äÒ3-€
ÖÇ¡`:ù^zî€‚B”TGø›∞^dì”c≈˝ÿ•L]∑‘cî2Ó« ©¯ªÔè≈a\b-◊2LsuΩÛkOöò˘%Ó[|ócEQ °—hhöv$ç l€.ã+++è?ÓŸî≥ÜI&ìÂ‹SAîxé› ı®à¢éÛ!IEQ’0 ~øˇ ï+´sŒ_”πÍ¯Àˇ˚Õo~ìa«¨Ì(S¿N¿≤l0ÿ≤ùııµ≈ÒÒIŒÂ=&ÎÏﬁ”*Üa∂m!ßÊ‹n6™o^}V˙ú++eˆIwr5®À@0ä¢Ç îJ•L&311q»¨€∂[≠÷∆∆∆ì'OÚ˘|Oø/Üa	?(äÚ<' ïÙÛ"CE—¥éë©YKk…≤ÏÛ˘Nü>ΩMŒ" ﬁ∆âD¢E"ö¶%a Fˆ ö¶O"W/5$EŒ¨}æx˜ü˝…üQÃŸ„hHà ƒitÑúZ^|4úå¬@d•°êçb:0N:ÂèâÙÀ¿q(äÍ∫^.ó[≠÷.çÈ˙”4ç∆⁄⁄‘bvÏxﬁ¢ÉäÜaÕ÷Û†µaöí$!ˆÒz.E•qªŸlÜB!ö¶#ë∞CAxûøzıj<oˇx‹nwµº9ê#ªÜanèè i≠‰÷æ˙Âãä,U´UØ◊{D„£Ìú
á√”””ÌÉûSïr!Ë˜nÌF€Ìvc∂¨6k'í⁄«NçÉKÇ 0ÉûZAL”<XªÀ≤Z≠V•RY___ZZ™V´N¶L«RU∞Ba‘”Õåmp∞	µ◊rHG±ÉKF«qi‘´äí I2ñH¶Ï–á$…x<ﬁ≥sœIÄC‚~‹¿q\4ÖB_Ã}¿ùKî+≈Êª3-üﬂ0EÁ¯Êy>âÑ√·#\>õOúÖˇdìÁyS5’IÍ@ç›lÇ›≠ä¢l€∂m[EAR©‘~=Ö∂mÇêÕfÁÁÁØ_ø~ÁŒùÕÕMA`∆'ä¢—hÙ‘©SâD¬ëµp∆ûbØchÀ≤¨ΩtôXbLQvÀ«©µz´T∫a `.ì&ñaE•ÀÌwJ— @ú+¥O&˜8é˚˝~ñ°D° êD±gπ√EÔm„‘±Äi^èÀ9Ü¡OÍÕ/Äî2`´ A€∂a≈wˇR ¶|>ø¥¥tÎ÷≠õ7o.//√¢,€∂1c&â$ìIä¢¢—®£øAø‘—m´Zkv<‘4›hª—Ü›N2U’†“L•’jÜÅ à¢®Œ9é;…7Æ˜‰ @√6÷ñºn4ÅèvpáS«eÜ†®ìPã¢(Ií»IΩ·˚P„Ä¨ØaYAêgâˇä“œ˜/!iµZÂrymm-ïJ9øu*VÇòòòàF£Ç¿{ÊÅ lê”ùÜÿ”Ä2Ãæ$é„Ü  4]˜πHY  ÄÙ˙ÚÙÿgØê$Ÿm	÷Zö"6Fác∫n∏÷◊≤Ïs}û¶®?¸√?<…ÕËå˚ãÑrπ‡Û∫ûIÛ£ÉvNΩòœ«q 's'º`jÏœ/Cíd$I•R`´“°ŸlÓû•ù8≈bq}}}mm≠R©(ä7º6ëHp#ëH,ÉFŸ¸¸º(äôLvÔ92,up˛W’- ¿û|çƒíÈÂ{`´*ä0ö¶ú&íj∫:ï ÍÇ•XÕ—·A(ä4Z%UÛ˙É∞÷^”uøáR0ÔIææÎ¿∏øHXYzpt:¬a€9ÂHÿ_Y¯ÂRcoÔ/«qpB≥{34EQjµ⁄⁄⁄⁄““R>üó$©›†Äù88éõûûéD"Œ	∂mèééjö∂ºº¨Î˙NùêRkO]mŒ^Õ 8é#Ë Õ∞Ç(µØP◊ıvÂ‹¥@œ6Ç8AÈ2∂⁄éY∫ äb(WTÕ˘n-S?9UKGà˚YñÚπÙ≈Ÿ7é|‰p4y‹ú"¸eë2/Äî2  ä¢†›]3¢(¬T—nuﬁ|P*ïû>}∫≤≤“›úﬁX:111:: ≤lªñk¶|>ü◊ÎÖçzí†^´åüyñU©ñicEkèJÀhl®˝+"P-ΩæÏÑ´t√R¥g˜ä¢h6^*◊BAü™Èf◊Îu∑{ò üßÃ`ˆÛz˘ºÛ}Üﬂ˛Ó??9{´˜Ã˙J?∏ø8EfÒ±ãÁé#’ù„¯„ÊT(wæ7á t”–O§üÓPcÿ„„yû¶iñe°G∂gy∏m€Œ∆ßOüﬁæ}{~~æ=JêŸŸŸÛÁœü?~llÃÌvw;‡ùñn∑õ¶iö¶mtƒ≤´çZ≈µµ	ﬁ˜à°ËÓB«Ò`dölñek≤∞∫¸‘„y÷L∞“P‡8›K¬q<IJUËø`)§YØò¶ä√¥YQmCÇù˝>˛Ω'Û∑áb>ò$ÏÍøm€{Ê¸w‹”∞Éﬂ´ﬂ¡;p749øôÓçªΩóΩrPåv2x!d“k=DLﬂs! È8Óﬂ˛tÈÒ]à˚Å9’ÁºÀSo¥‡kõöÆÎo;ù	EI—Tπê[ﬂ	£}Su«ó∑ü˜ΩéË√PcßıÏBô˝Iÿ. ^ñ[Útt¥2£V´≠¨¨ÃÕÕÕÕÕ≠¨¨¿n∆0|¿≤Ï‰‰‰≈ãOü>}ıÍ’——QóÀ’[⁄°(º*Ñ„8EQ¢aØ„ΩØ’õJ´¯≥ˇü±ëÑ√¬R]É%„ä"∑ü›Ÿ!8éG#ŸÕ @QU‘≈z>Ù;.^Üa†neY÷∂>r B1I5 8éµIì ™™çL¿ΩÖ †Â˚∑?˝ËÁ?zˇ›w~Î[o®æ≤≤"ä¢$	›´EA7‡ç›6æCÀf.ÌpNU5öË¡›˛«q<öupGåV)∑⁄˜ûcl“ù µˆ¥Éß7Øˇ¸”è~íàÖ<”Êz/WÎRm}Ò—-ƒ®√¥É·—…Éq™vô"é;·aIROn í ª,[ñ•H“Ê⁄›Ã“]◊±’sñ}Qµ„e±UUnﬂ±∞  ¢–≤-äuË˚áß¯Å©±”zv°L«q≤∑a	uB€∂·ëÿjµ2ôL Ä≠g†àY\\Ñâv–É„8√0—h4ãy<ûd2âDˆº©«qØ◊€h4LµA f|kÛÛ°645>Ï¬¢
F|>C?¸Ÿ[ásµ÷§§;>51}Ófˆ	 Ä¶»°ò?pë$MÜr√úâz‡ÂÛ˜€°ﬁh—I”¥§òıFÀÎq!*ôr1û •Ê 4MÖCæÕB˘È√'Fû’lÉwc°`‡Ôo[ï‹hï
πõ◊?∏rÈ‹ÇB≥ét%~¸·{ÌÕ÷$Y±Â™¶ Ì&™,K˝é »ƒÃπõŸà{2Í˘˘n‹EÓ≥Éå˚ö¥'|¸·{Î´ãﬂ¸˙UáßZÀÁñÆ\:„\&µÂ<⁄«\·híÿRB]{zÇÊŒç»í…d‚Ò¯»ƒlvÌ·æ8’Ωvô"1<9_XÑgd0‡uªÙôÒ∞s≈˝ìcQe”Îø¯È?Ñ|œga1‘∂Ì}Qµ◊ÀÕ«_XéoH%±Q^x8W*ÊÿÛc  U”M•ajœíÒ@ç›πº;Ò€≥+ë›ì†,ÀzÚ‰…'ü|íÀÂ√ööörª›:´F£ëÀÂ≤Ÿ,lk≥`höé«„…d∂„ÜÚ®À_Ñ’’’ø˘Îøå»o|Ìıù~“µªO*˛@Ë¬ÖèÓj)’≥ß'∂©EthÍ‹W€{\ä¢∏e;Üz∞X—s·¬ÖôôôÎΩ∑¯hÓ≠7.mõÀ<ò˚ËÕØ\lSZQ *ìﬁuä‹ˆQe+F∂§LOOßW"zΩcU˘bEêph[ü=.|nd|b˙Ëã€?˘·ˇËF‹FÈ…ﬂr‚ÂÔ¸Ì—≈RˇÉ+ä≤'ÓÔ˝vèŸN∆˝N⁄Å¬N®u@∫®˙c”kã˜ÄVÎsÆ¯–¯‹ß?ˆ2zª?{≠ÑÖ¬—3gŒ–4Ω∏Ö-¶:4î\’ÃÂù8’±t]øqÌ{N1<<úK}¡a‚6)©Y4˘|æµÇE¢j≠úÎòEE|ÎÎÎZT•¸ß‹Ωa»ÂéóEQ¶i≤ù™–m⁄˛ƒ∂ëËÙ◊C°ê¢(†∆.\∂,k' ú9s¶=çÔ©»(äÔ¢ ¿jûÁù$QaKGX¿∆∆∆âlïÄaXˇÒä¢(äöôÒr»¸ì5À≤qÉ$I Ç ànXıñö-ä4√≈b±p8Ï˝ ïf≠ Ç,«0å4ÑJ•
ÖWEQ°ÿ¯”GuÃjb(Ç @VÃ|ElJ÷Ëh (ùùùéπƒ∂ÙS'hŒzÛÕØ í,+äm[ÇêŸ(‰õ¢ˆìÎs~Iƒ¸  U3J5ï`£££ëHd$ çR«™º˛0ÜaÇ¢¬§D Ç¿•r…åyΩ^A¬˜w~˚∑$Ijäí°Î∞!ä¢4çnnn¬‹E ¿WÆ^nTÛ˝Œq‹û∏˜≥ùå˚ùbÙ\Ä®âRS›Ä®¡ÃoÁ√  @›ˇÀØ_î≈Züsy—°âôÂª¶!€∂-´f¶(óHí8éSé?öØÍBÅ°A,)◊µBUéD";q™cˇ‡8>2uqcÒv˜<œb3©≈{$™ÿ∂mòvÆ$7E-b˝n
 P¨ ïñu~&˚eMmü£ÙsgOÎJB≈=1≈—⁄•ãÁ±.ä€ñJQún#Ç¯¨á9ä¢$I°(™´öÆ ÿ0•P(@Î®±ó›n˜NîÈr‚{:#·Mp®™∫ππ	˜ácF¡RFé„ÜááßßßÅ º1rø-Ø†ú5‚Ô˛·«©T
E—x<˛≠o}´ΩÖ2,±ã«„„„„^ØW°ÈlY_LóõÕ&\!ä¢~?Ny
.óãÁy«Û˚˝·¯ÿ““R•RÅ)º8Nƒb~ÿ<√0wh≤ÿ Àπß’jkK ‡·0ÌÒx e±RiA∫S54‰=sÊL4˝ﬁ˜æ˜˜?˛¥V´—4}Ó‹π∑ﬂ	á√Ÿ¨ö´¢i«q(ö\íIW§—‡yû W`∏*ÿkkèÛ˘∫ŸñõÀ≤∆$ñÛ˚˝P ∏Çôí∂Ø¡˜ƒΩÁòÌd<¿§Ìrjç]tg∑€EQ¬/6ë~Áä59ﬁòXje^¢oûÅ∆(äzΩﬁ°·Ò≈Ec9Wp‘Ì@ ∞ß:ˆÇ .∑∑Á∏≠TÜ°;“≤,«›üj´y÷ÂÖB!îâ÷5m#Ω—>K0H⁄Ñ◊0∏çt•Ln§•Y´€ó
¶™™B™BôÇ¢®¶iù)ä≈h4 ≤Ï®±;ów¢L«ù?¯ÓÊíiöp_v(8Ì{Aüœkë∆««ù¸ö}áªPÆrttîaüœ7222;;Î4[ÄÈïn∑;çÉAí$UUÂ8.ëH¥◊}¡õ√∫"y‹ËË(Ií•RIUUË’É±XÃ1F(ä
á√ÌÖ™PΩäD"Ì°¡Ø^Ω ≤l:ù åççMMMçççπ\.Ií∫WµSØ˝k$"t$√ ]˚ˇÓw=qÔ9f;0iWjI‘:≥{h⁄ÁÛë$πØπ‡U»8é∑Z-  À≤±X,
¡e–4ùH$ÇÉ0É¢(øﬂè«w‚T˜˛Ÿi
¯IOLL–4]≠V√†( ÎıR’l6[≠Ç ¡`ô∑—4€gÅ°[√0˙ƒî¢(À≤˙yπß¯Ü ≈®±Á÷⁄Ö¯{¯e†í"ä‚_|—l6ÁÁÁÒ÷Ñ‚y˛µ◊^É-∏T∑mªR©‹æ}˚Ûœ?oµZììì…dÚÍ’´œª#Üap[…¨≤,;]ªNƒ0Lá⁄Ø|R™óA¿;Á†L‹i(xWT˚CÇ ‡‡•RÈΩ˜ﬁ[^^÷4-ç˛˙Øˇ˙Ÿ≥gIíÏ9‘i]√0NOQîû7ﬁ¡:Ë)8ÿ‡√›!„¡&m◊àwB≠#õÜ’5MÎ.á‡∞Ö∑t·,¿∂m]◊·io5°(
j:˝ÔM”vö¬¡Í24M√ÀÅﬁ#√pá}§˙¡î ”4Vù€æˆKç=πºevì2Pƒ¨≠≠≠ØØØÆÆjöñœÁ{NåaòœÁK$ìììgŒúŸÈ÷˛∂È¸‰ìOç∆ÏÏl4˝˙◊øéû‘
4An‹∏±∞∞P.ó9éª|˘Úï+W3m @oã	
◊ıııL&3??_≠V;NÚ)„rπ\.◊ËËË·E¥P|>«qÇ @1y¢Û˜i:â‘j5ÿπV´)ä2ê2¿éRJUUWWWÛ˘<Ï“∞{[√0`JñeEQc.9öò€Ìvπ\≈bvœ:…¥√0,â(äR≠V+ï
åOÌM¿+"e†˛"ÀÚ⁄⁄Z≥ŸLß”π\NÑ√…Ì-¶,À™’j,Àﬁæ}˚ÚÂÀ™cËªÆ’jí$YñÂÛ˘XñÌ≥=¥ÃaGRAﬁx„çìL;Ë€kµZ~øø\.7õÕF£ëL&Rf ÿ&e‡Ì‘ÀÀÀ•R)óÀïJ•V´’	[M3›n7ä¢çF∂ÊÑ≤FQîb±Hƒ‹‹‹ÂÀóÅ@.óõüüámbTU•(ÍÌ∑ﬂÓø	é„,À¬>ÿÎ˜$ìEQö¶=ºÈﬁ-ubI¿/G ‰Û˘rπúJ•R©T≠VÉÔvoIí—htxx8`V,óññjµöS9›jµR©‘ƒƒƒ›ªw°ŸUØ◊aÒïa≤,Kí¥ØnO«1sxÏ@8Œf≥«’Îı\.W(âƒ@ù¿ ûKô≈≈≈L&ìÕfEQÏˆ¬¿(“ÃÃÃ»»À≤(ä˙˝~í$=z‘~'§¢(Ÿl6ã!R,°œ ‡Û˘‡›Ã˝ãx'∑€Ì˛Âv$ÿów&
E£—f≥Y,sπ\(:_¯ äHô;wÓ¿pw∑àÅ©Ñ∞‹1
¡Ï8ñea£ôf≥Ÿﬁ†z%‡Ø`‚ÄœÁ>wÓ\(ÍAÜa¿bÀˆB§n4¡ÄÎÎÎ≤,onnŒÃÃ§Ã \ ¿@ÿØß”¡Ô˜ª\.òk`o'öéF£ôL¶T*ıå4ì$
ÖÜÜÜ`ÚÚæT√0`ØôÈÈÈó≈¡¡≤l0Ñ°1œvπ\ÔÃ L ¥´–H!j7Ü˘˝˛`0ÿa—¿Ä7Ç √Ùî28éÛ<è„¯æ¥∞Ì 0ÛRòKæn∑€Îı.//onn÷jµ@ –-e`≈ÜûáÂ`äà¡F<0¿f∆0 
∂—√mi∑A∑ù˚K°<tÙìÊ†„@˚√cZ^«=≤éÎAúJò˝·vª˝~?º™0¶i¬˛2´´´¢(B¡‘ùí;{Ωﬁ˝÷L¬p”4Ω^/M”/KÓ	ä¢,À-,,‘ÎıB°0::⁄›|Ôó€a˜ï='q¸%Z-în'y'«≈u]ÉÒx‹©»Ç%ûÒx<ç*äÇaX´’≤mõ Ií≤ŸÏ⁄⁄å1MNNz<ûZ≠∂±±·‹Èú0n∑
†}ë’Îıû9s™ø,á<,&L&ì3337oﬁ‹ÿÿ∏xÒbwÄÃ≤,]◊;¸_∫^«Õ Êa‡J,Ë"x¡d?jwRs⁄ü8Wk #XTdFüz÷æ•Ã»»»‰‰$EQ∫Æ
ÖjµZ≠VçÜm€>üœ0QùV·Ç ¿\;Aí…‰∞m€∞^˘…ì'ÌÇFí§ïïóÀÂ˜˚Ω^oüE—Ì%:£Å¿•Kó
ÖÿÒ<ﬂÅ5,√8ÜèVæøD$=±´Öu»«ßda˛Á’óóóÔﬂø_,a÷/º”:õÕ.//óÀe®í†(
2CcJQE°mEí§iöŒ='ö¶ãEí$a<˚ï?´	ÇÄU™Ÿlv||‹ÌvøDÆ•‡≠ZEWWW`áànâÀÂJ$ccc0Du3è«áaìó€∑o„8ÜÜÜJ•“„«èK•í„$æyÛ¶œÁ”uä°W˚\Ö›‘óóó+ïJ,{µÒ¿ ˙ï2◊Æ]+óÀ›«2l‘çFÜqπ\«Ao.A.óÀ—˙,À:}˙¥m€™™ä¢»qœÛÈt∫P(îÀeEQöÕÊ≠[∑†-
}∫Ø05°›4==”ùa/µ¡&¿Ø8¸ˇ õ∫l∂a¨    IENDÆB`ÇYimage/png_/http://www.brokenthorn.com/Resources/site/5.pngO¨bplist00‘
X$versionY$archiverT$topX$objects Ü†_NSKeyedArchiver—	_WebResourceResponseÄØ''-.4567YZ[\]^_`abcdefghijklmnopqrstuyU$null› !"#$%&___nsurlrequest_proto_prop_obj_6___nsurlrequest_proto_prop_obj_3R$2___nsurlrequest_proto_prop_obj_0R$3___nsurlrequest_proto_prop_obj_4V$class___nsurlrequest_proto_prop_obj_1R$4R$0___nsurlrequest_proto_prop_obj_5___nsurlrequest_proto_prop_obj_2R$1ÄÄÄ	ÄÄ&ÄÄ Ä”()$+,WNS.base[NS.relativeÄ ÄÄ_/http://www.brokenthorn.com/Resources/site/5.png“/012Z$classnameX$classesUNSURL¢13XNSObject#A¬˛kŸÎâj »”89:IXWNS.keysZNS.objectsÆ;<=>?@ABCDEFGHÄ	Ä
ÄÄÄÄÄÄÄÄÄÄÄÄÆKLMNOPQRSTUVWÄÄÄÄÄÄÄÄÄÄ Ä!Ä"Ä#Ä$Ä%\Content-TypeWUpgradeZKeep-Alive]Last-ModifiedVServerWExpires]Cache-ControlTDate^Content-LengthZConnectionX__hhaa__TEtagTVary]Accept-RangesYimage/pngRh2_timeout=2, max=100_Mon, 17 May 2010 00:55:30 GMTVApache_Mon, 12 Apr 2021 10:13:14 GMT_max-age=2592000_Sat, 13 Mar 2021 10:13:14 GMTU15467_Upgrade, Keep-Alive_‹

YnBsaXN0MDDdAQIDBAUGBwgJCgsMDQ4QEhQWGBocHiAiJCZcQ29udGVudC1UeXBlV1VwZ3JhZGVaS2VlcC1BbGl2ZVRWYXJ5VlNlcnZlcldFeHBpcmVzXUNhY2hlLUNvbnRyb2xURGF0ZV5Db250ZW50LUxlbmd0aFpDb25uZWN0aW9uVEV0YWddQWNjZXB0LVJhbmdlc11MYXN0LU1vZGlmaWVkoQ9ZaW1hZ2UvcG5noRFSaDKhE18QEnRpbWVvdXQ9MiwgbWF4PTEwMKEVXxAaVXNlci1BZ2VudCxBY2NlcHQtRW5jb2RpbmehF1ZBcGFjaGWhGV8QHU1vbiwgMTIgQXByIDIwMjEgMTA6MTM6MTQgR01UoRtfEA9tYXgtYWdlPTI1OTIwMDChHV8QHVNhdCwgMTMgTWFyIDIwMjEgMTA6MTM6MTQgR01UoR9VMTU0NjehIV8QE1VwZ3JhZGUsIEtlZXAtQWxpdmWhI18QFCIzYzZiLTQ4NmJmYWU2Yjg0ODAioSVVYnl0ZXOhJ18QHU1vbiwgMTcgTWF5IDIwMTAgMDA6NTU6MzAgR01UAAgAIwAwADgAQwBIAE8AVwBlAGoAeQCEAIkAlwClAKcAsQCzALYAuADNAM8A7ADuAPUA9wEXARkBKwEtAU0BTwFVAVcBbQFvAYYBiAGOAZAAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAABsA==_"3c6b-486bfae6b8480"_User-Agent,Accept-EncodingUbytes“/0vw_NSMutableDictionary£vx3\NSDictionary“/0z{_NSHTTPURLResponse£|}3_NSHTTPURLResponse]NSURLResponse    $ ) 2 7 I L b d é î Ø — Û ˆ=Dfilé∞≥µ∑πªΩø¡√ƒ∆» Ã”€ÁÈÎÌ$/8>AJSUW^fqÄÇÑÜàäåéêíîñòöú´≠Ø±≥µ∑πªΩø¡√≈«…÷ﬁÈ˜˛(3<AFT^avñùΩœÔıÎ%*@DQVjnÇ             ~              ê‘O!∆GIF89aÜ›˜     Ä   Ä ÄÄ   ÄÄ Ä ÄÄÄÄÄ¿¿¿ˇ   ˇ ˇˇ   ˇˇ ˇ ˇˇˇˇˇ                                                                             3  f  ô  Ã  ˇ 3  33 3f 3ô 3Ã 3ˇ f  f3 ff fô fÃ fˇ ô  ô3 ôf ôô ôÃ ôˇ Ã  Ã3 Ãf Ãô ÃÃ Ãˇ ˇ  ˇ3 ˇf ˇô ˇÃ ˇˇ3  3 33 f3 ô3 Ã3 ˇ33 33333f33ô33Ã33ˇ3f 3f33ff3fô3fÃ3fˇ3ô 3ô33ôf3ôô3ôÃ3ôˇ3Ã 3Ã33Ãf3Ãô3ÃÃ3Ãˇ3ˇ 3ˇ33ˇf3ˇô3ˇÃ3ˇˇf  f 3f ff ôf Ãf ˇf3 f33f3ff3ôf3Ãf3ˇff ff3fffffôffÃffˇfô fô3fôffôôfôÃfôˇfÃ fÃ3fÃffÃôfÃÃfÃˇfˇ fˇ3fˇffˇôfˇÃfˇˇô  ô 3ô fô ôô Ãô ˇô3 ô33ô3fô3ôô3Ãô3ˇôf ôf3ôffôfôôfÃôfˇôô ôô3ôôfôôôôôÃôôˇôÃ ôÃ3ôÃfôÃôôÃÃôÃˇôˇ ôˇ3ôˇfôˇôôˇÃôˇˇÃ  Ã 3Ã fÃ ôÃ ÃÃ ˇÃ3 Ã33Ã3fÃ3ôÃ3ÃÃ3ˇÃf Ãf3ÃffÃfôÃfÃÃfˇÃô Ãô3ÃôfÃôôÃôÃÃôˇÃÃ ÃÃ3ÃÃfÃÃôÃÃÃÃÃˇÃˇ Ãˇ3ÃˇfÃˇôÃˇÃÃˇˇˇ  ˇ 3ˇ fˇ ôˇ Ãˇ ˇˇ3 ˇ33ˇ3fˇ3ôˇ3Ãˇ3ˇˇf ˇf3ˇffˇfôˇfÃˇfˇˇô ˇô3ˇôfˇôôˇôÃˇôˇˇÃ ˇÃ3ˇÃfˇÃôˇÃÃˇÃˇˇˇ ˇˇ3ˇˇfˇˇôˇˇÃˇˇˇ,    Ü› ˇ ˝	(£†¡Ç8*Ãë√á#JúH±¢≈ã3j‹»±£«è CäI≤§…ì(S™\…≤•Àâe$îëc∆AÉ3l§ñ™g™Ç«J¥®—£Hì*] ¥©”ßP£JùJµ™’´X≥j› µ´◊Ø`√ä;ÜaA<˝¯°ë¨€∑p„ ùK∑Æ›ªxÛÍ+QO 2æL∏∞·√à+^Ã∏±„«êaL8¬»ò3kﬁÃπ≥Áœ†CWTH∫4éõc¸DXZ¥Î◊∞cÀûM;Ú°mrÎﬁÕ˚¡!à]≈ZEº∏Ò„\HﬂÓÕ\∑°õ+∂Êh∫∫ıÎÿ≥kﬂŒΩª˜Ô‡√ãˇOæº˘ÛË”´_œæΩ˚˜	U;Døã˝˚¯ÔsôüêÀ°¸˙q!†ÄßqaHr8Ç<ÍSÃÉFXÃ/øÉœs≈∞BMg| Ü(‚à$ñh‚â(¶®‚äÔ˘∂ pÙ≈(„ˆ	∏MB´t!TÄˆ(†Vr⁄ƒc$<H™£§í∆8¯ Ö€§F á¨q◊ãXf©Âñ\vÈÂó`äË[,0Œ(£~2<Äcp4ÚË#©2§:F∆ÉdíK6·/ö< %ïñY'c§ì–ïa&™Ë¢å6ÍË£ê‚‡‚*f÷óV®âCé vÒÊÄqÙ ùv‚Ÿ§ì˛≤âüNŸ!5∞∆ˇ*k¨∞È≠∏Ê™ÎÆºÍÍ[•ù÷òÈö˜©bÏ±»™Ú£™àjÃù¯<–§Ñ‹Û‰™RJ◊\oBíñnπÂÉ‡vﬂÊÛ]πë“]±àõPÊ&‘»ÄÃ»vË™ª‚∑ÈÚªõæÚV£–∫≈ãﬁ∑{ªçª_˙pØG¸Âlû¨ß√nä_≤/€lö≈‹©µπ]À™1†Ì∂ª	—6¯¿ÃÎ¬hv7C@t›ÂÎP,¯X·Ã+4‚œ¯>0 Õ&~´Û
3¿L¿‘;Àƒo3Vo„åÃZßÁt†ﬂùËJ3-ÒŸhüHÒåÅ\å±¶ú⁄«q≤31+j»™3ÚÉ∫Uˇ8!∂≠ÆÃrn.Cd3ªbìkswF`6v_Û´.¡«»§a“KÔª÷C„s≥øú'§2‚Bü˜µ¬âÉânÊi∑Ó˙àk[|1¶po|i…yö´‹ùß1#˜M·ﬂ'ß‹°§É.ÿCáÓÔ3≈.Ó‡ÊV
C“ÁDÛÊ˝Û-,}>-¡43C„›oøM5∫]è˝n£Ã ~ª∏ßQˆ˘të˝€#…Êÿ‚<àPîHôóõ˝!,~Èﬁ‰W= Ü/h·k‡¸¥˜≤ÏU]p ¯ ≈t]ÔóWgø⁄∏Ö¥â]å‹ˆ6Üƒ≠™ –CtWêﬁÅlI”‚ÕÑˇ(D!¿De…AÚî˜2›ƒå&€†»ΩÖUÅ ç Eÿû∞ÇX¯c´#Ä!ûë∆‡[R§¢‰p∂î–zH>™·9†≠Ä]G[∫¯Ev= ST˘Ç!Étﬂ:ŸF!F2
kúﬁCdí@Ó=†r/ì¢§ú°G>ÓÅ!)3⁄'7∑3/∫ÉZ#¿&√8∆ó·£
dsF»¶≈T™Òp´[d#øµµMñPi-Ñ°0á˘Zjvi≤°ÌÚ≥√ÜÙpH≈0ìú¥∑!R®OŸJ‚P8Ê≈ã \ÒA9∂ƒ jûÀ¡Í÷G7F0è‚:°&É`Ü±h∆¸ˇàm`“ãsMVÁ¥;Æ.û0C'¡™ÅtÄùütgH*)µ©I¥í!>û`OÑ‚ù$˙r3ä»Q.lV(DspQ¨ïìr©:ï∂Rƒt¶ı#¶NwääUÏcpú†Ãbu*wf·C†&ÈIà÷¸Ö/N&$Zmõ›º ùa¥ÄÜmëˆƒ• …ˆÄ˛ï1è]’Í!“ÆÕ=∞ ˆ®@qZNú¶U†F´Ü3∆Ä;ÊÄ¨f}$”9åÚkie‰çÁƒ:
Çmmëës:≠ ¡‹x∞∏3úK/9 ›’få˝ÎÙ*˚Ätîß®Mmb|Z±†^lH6ÃÅQuòUˇ$uKı€©Çóõt§ÉBæòÍA¢%.1´sÕd√vR√ôVê9òÂ8…=xB¥Ñï∫¸WÈ·„é9∏Eõ3˚Ù∫ûC_Iq…Ë∆í$?†hv!ﬂˆÊ`^Õ /D¬H50VúÛZ/$)7Y˛Z‘Ω”}Ÿfè—ŸK.ª!-)Çùa‡—ùVµŒ0KXKVﬁ‡gíDÕngÀÃ⁄ﬁ6∑^…äë›§C¡ù™M
B‹buyZΩØ ›*Nò]!ºU|nI˜W_w¶µæ8ıÔ|È[ZÉ^í-‚hh∑Gú:-…[º/wÌGd√~§»9ñòs¿N«âfdﬁıÑåÆcÑ˜ˇíë/\afÖ¯‚#Õ∏Î≤}ãL‡ìÚ∏lt~Ûê”‹å∞·˘ó÷∞¢=÷vÅ9˜ylE,[π’ƒ5Q™˝Våj˙V70ÓrBcÉÄ2®Nµ™S˚+7y∏„HÛ€ûs ñ}ÇëÛHf›–z≠Ü√‰¥WÜDyÆE ˝zùZﬂWÿﬂMsÆ%Íë1õ–‰nôúÆqFÿè!tk˜®cNéîÁ◊F›»gŒˆŸ◊≤ÊÕzß}n∂\ò—¯ŒwFi˚H:ôî.÷‹é≈õl˚úéVÑ|€‚{ÑZ∆§Æ±§]]â‡Äj;{»®&i™ŸÔ‚Êº„≈iú„ˇE..i˝FW‰*7y ©ﬁçO"1–8[FÆrë‘∑Ö _9ÄéÒåGƒÊ‡˙ÀAi—°ÛºÁ)c“¬sâ^‹~ó˙s`Û≠s„0'˘‘≠Ô≤õ}"D•°ø©X0$X1¯R}¡i	±ÿ∑‚uürbâüΩ6?ˇ˚IÓ-¯¬+:Ì4Ñà®∞˜⁄JDÓJ§{›%$’˚bÔ/à=Ôö¯Êf€úˇ∏˙“Ûtp˙ÅHSêL1‰7ôÒ∂∑!U"⁄∏ñÓ™¯^UÕõ˛5#w˘Ô3¸·_òÚÅjñ§˘º˝ªc>j˛Ûz|Iÿœæ&r˘M‡„ºG‚ˇÊèO˛Úõˇ¸,9ƒ6s≥ÿøùLè?¸çC˝á®˝ÌÁªMƒoÙ˚ˇˇ Ä∞L˙WÄΩ'}7q◊ÅÄÿÄ¯ÄÅ8ÅXÅxÅòÅ∏ÅÿÅ¯Å Ç"8Ç$Ç˚WÇ(òÇ*∏Ç,ÿÇ.¯Ç0É28É4XÉ——>ëÉ:∏É<ÿÉ>¯É@ÑB8ÑDXÑFxÑHòÑJ∏ÑLÿÑN¯ÑPÖR8ÖTXÖVxÖX(Ñ(3:»≥~^¯Ö`Üb8ÜdXÜfxÜhòÜj∏ÜlÿÜn¯Üpár8átò[H80z∏á|ÿá~¯áÄàÇ8àÑXàÜxààòàä∏àåÿàéˇ¯àêâí8âîXâñxâòòâÉxá°âû¯â†ä¢8ä§Xä¶xä®òä™häúÿÖqËtãs(ãrË~ã∏8ãπXãª¯ä´¯ã¿∏ä≠¯ öò
∞Xå«òâ∆Hå hã}»åò∏å»çó(çÕHçñhç—òå€åﬁ¯ç¢8å”8é◊àå∑Hé€àçï®ç’»çÌ®éî»éŸËå‡XèˆHâ‚hà Äà÷∏èÅ  Yà˛ÿèî8ê…ËèíhêÁXéôéçàê{àêÚ∏éÓ8è8â∆xèπëçòèÑ∏è9à⁄í|Ëè$Ÿá…ç'©áÈ πíëí–ì1˘í-˘á)ˇπê1…íaì5Ÿí>…á…í/…àCî8)íêEÈí&…îP˘îNiê‘HìÄxìBYëêëCâëÙ»ë`ñÅËëÉí=©îUyï7	ì\Èél…ì.Èámôñ(iìv)ózòëœó;ó˘ó}ôóZyñèxîg	î@˘ì~Hê}âêfiñ;	ôêÈÏhóñâï=ŸîYYïöôà!9íùYò_)ñ§Yö˛@ñÇöÇ(èoÈóI)òÿ∏íií(πá¨Yí≤Iíü9öAóçYíÄÈö—ï¬ÈîäÈó+iò5πúôπñ}ö»πúí˘ò—)ìDyôñë™)∑ÈöX©ôà©ôïˇŸòà…úŒâïziöÍñ®©ñ∆Yúã©ï≤˘õ¿iõÚYõÑ©õõYüÃ)ó≥ôï:)úéπñMâî∞˘öøIõ¥˘úÉÈì
öòwπüáôq9ô‘©†√Èñÿôù◊ôúπ† 
òéiüti°ﬁIü—…ùºπû,
éÌâì iï$äü⁄Iì'©ú⁄yú|y†¸âô= †˙ü"ö£ÒyëJ°ò3 ü)J°VŸèPY°Q9ïI˙û-Yô∫ù £ë˘î‡È•âπ§Rò:ïajü-ö¶ˆ¯¢^yë2 §\úY§5ö•∏	ü*§;ä¢] †Fj¶VJ†
è!ï Í£*˙ßrjà„ˇŸúVπ•Z¢Jö¢˙Èö#9§∆π†{ößj⁄©¡¯¢Y™7⁄†¢∫°~ä†fj†0â•ÑI§Õ˘áÈπá±˘•Ç™©$IúWI£b˙ëoßj…°´9ò?˘®€Iô*•Tö¨:˙ûâ∫¨Ã:ô…™ö±Í©‘zä†Z¨∏â®Gâ≠uz™Iâ®ô
àç*ï| ¨@∫ó9¨óŸ™õ⁄¨	≠¡™®ì Æ∞*¨Ä˙´ÉäéÌX≠¸j≠∆”Ñ⁄•v™©æJû•J∞ë˙èéÍú‚ÍñTZîÎ™Á áÚÍà›©´◊YØÚzó¿™±£‡:†°Iúê⁄≠ﬁÍê©Ÿ±¡⁄Ø,;ä†:Øxâß 	Øâ∞Óˇäó™±{òS™≥}üâsY≥äßhÈüòô¥≈z©ÿô´ +ú$À≠˜*°(£¶™î-õµüx≠Ü⁄¥%ª≠]ªÆ_kØOõù>KµR
≤EKûı¥âôßÖà£2:¢T˚ü‹
≠ìµ‡Í®töÆŸZ®RÀ©Z[∏ñ»µΩ:∂Ñ
û=∫ù]9ùwZ•h[∂=´§´∫¢˛P±˘∑<[∂ä8≥õ+≥KŸπ)[£7∏ˇ∏¥ˆâ|kµ+k∏∞;âàõ™bÎ∏§∂fkª[•*ô'õ∂Àî≈	Æ”⁄õ[π≥Ù⁄ÆG[üâ≥Pöªj€≥{∫&kµ˘™è¸(¨}KîÅXº±˚Ωäˇ8ªe©ªuô¥ì™∏µÈªö§£öñ+Ωu9±≤˙à4yõA9∏úÀìª∂Kzí`⁄ª¸…∑ƒJº´πåzª¶õ±mæºà≥+™S[∞Ä
¡Ë;§”	°Mö∞˘Ÿ™1
£ äÆŸ∞±…ºü€†äÿæ0˚¥¶[®~)¿©K¿öKªΩ∫≠Ÿj¿Ú€¿8Là‚õ≤⁄zª∫˘√=¨ée:¶J≥¨ÍûÆõ°:πøÎ´võºÑà£áà¬2,º¥+∞Í¬¯öø¯°›+ü>ö≥}ÎΩ9\∆}¯¿°¡‹≠Læ5Àæ’	«∑Í∞N€´Ñ;ø0{¬N,√i€¥øKØi≈œ;Ω€¡—€îZlΩ\ˇ‹≈%ª´˝©¿ã¶f<…∏√/L≈’{§~ã∂N:¶ô)«ì˚ñVåµ \¶¶,π‘π∆y,πrKΩÁã™Tl™ßåªWJ∂R€»∏˙•Ø˙≈BÏøà:∆òK…ìå∆Î∆lú∆¨øp¸∆©ß≠ô¡ªƒBÎƒõ™¨,¡,L»Ì:»;¢Í«â\æ∆\æ|9∏˘ÀËº¿¬ºŒÒØí"Œºƒl¥`˙«r∆¬kƒJ£˚≈“|º™\ñ®äÕã∫£±\ª'˙ÕYlÀ}Î«ºÀ5ÃÀ6—‹¥ÏÃŒàÀƒÚ∏ç…Íª‹Ã™Ïør*£d<ì†<À†–ÂL∫gK–˙[πÇºîfˇ˚—DºÆ∆j§ç≠>öÀ!ªΩÆåŒæ¨ŒM…≠—ˆ\≈MÃ…q\œÀ<«úπ®ÊÕ•‹…Cú–JJ≤p˘Ãé¸ 1Îº4›Õ6˝ò8Œ€”´[¨Ê∆@—7\‘e|‘Lú‘ùÃ1m≥^*∫æô¬≠¨ƒU≠“ÄµiM»
√´∂Àz–5=Àá\À:ç≠ﬂ	’øä¥Òø	\—◊√ÏŒã[◊Ω∞HÕ‘D¨Æ™◊ò=‘}m¨ˇÿ¿I∞∏∫’$L◊M∞ä-÷Ä]÷m£€<ÿπi“…Œ*…öm∆rù“^åÕãÕæ«Õ“HäœH:π◊¸‹}«zà“ÅùÕ¨¸⁄d
»ã<º‹ˇ=”3	Ω∆Õ«Æèº»"Ïü„Îœ√M‹ú-Œ]´‹„⁄÷L÷ÛÌ§ˇ+ï4õ”‹K“˝÷Å“)ç *ÿ1å≈/Õ‹Ÿ\”‡Ì¥„]øû€≠≥#[¿\Ÿîù·T›ﬁ9\‹Ö|≈LÌµ˘Lﬁk∑Œ}¢ªz›π*‹x|œ⁄¨“ÃΩ‚´‡”mπI›π
m¥ß+§ûl¢◊À»;›’ö…DÕ·|‘ı›«ü}»IΩ≈∑ﬁÈ≈,ÏÃ∑≠∞Ç˘œÙ˚–÷ã”¢-∏W÷ä⁄ÿ	û‚-ù„ê„í¯⁄ËÕﬁFﬁ¿l*ﬁˆ=Œ"˚æ
]†ŒlŸù’z·VN›∆K⁄û›ô⁄m±&Ïô7æ’ˇÍ€{ÌÕ“Y‡ÆØ[‘,ﬁÊﬂÀ¶l‹∆ÏÂ∑Õ∏7k£\N£ó:Õ~‡êNënZ◊›ùÁíŒﬂ
lÁœù◊ZŒ∫,öîÓÊÔ≠»¶º‹ÓÍÀ#ÁﬂπÎ	Ïì®ê ¸é•nﬁ1¨≤È∏¶néµæñ.Î^¬”ûàÉﬁà'}Ïm™Ìi>ÎÑ^ÌŸÓáH∆œﬁ≤√òÖÀàÓ∞®Ó†Ó∑»ÓûÖÎ.ÔÌNÔÒéÖ¡\Ó˝⁄äj—Ô˛˛Ô ?_ü
ø˛ÓáˇÒ?Ò_ÒÒÒ˙ª≠∏ÒˇÒ Ú¬ËŒ"_Ú&Ú(ˇà≠Ë,ﬂÚ.ˇÚ0Û2ˇ?Û4_Û6Û8üÛ:øÛ<ﬂÛ>OÛ≠ÿB?ÙD_ÙFÙHüÙJøÙLﬂÙNˇÙPıR?ıT_ıVıXüıZøı\ﬂı^ˇı`ˆb?ˆJÙdˆhüˆjøˆlﬂˆnˇˆp˜r?˜noˆt˜xü˜zø˜|ﬂ˜~ˇ˜Äˆv¯Ñ_¯Ü¯àü¯äø¯x?¯åˇ¯ê˘í?˘î_˘rÔ¯ñü˘öø˘úﬂ˘ûØ¯òˇ˘¢?˙§_˙¶˙R˙®ø˙¨ﬂ˙Æˇ˙àØ˙∞?˚¥_˚∂˚]/˚∏ø˚ºﬂ˚æ_˚∫ˇ˚¬?¸ƒ_¸ì¸∆ü¸ ø¸Ã?˜»ﬂ¸–˝“?˝Wˇ¸‘˝ÿü˝◊o˝⁄ˇﬂ˝ﬁˇ˝æœ˝‡?˛‰_˛ß/˛Êü˛Íø˛íè˛Ïˇ˛ˇ}Ô˛Ú_ˇˆˇjOˇ¯øˇ¸ﬂˇ’ÔŒ —C‡@ÇDòP·BÜ>ÑQ‚Dä-^ƒòQ„Fé=~R‰HÖ2bêëIñ-]æÑSÊLö5mﬁƒI”$Jï9}˛TËP¢Eçπ3ÂJ§Mù>ÖUÍT™Aïˆ¨öUÎVÆ]Ω~ıyï)X≤eÕûEõ6´Xµm›æÖW.F∂sÌﬁ≈õWØ÷∫{˝˛Xp“ìKFúXÒ‚}?ÜYÚW«ì-_∆ú9la¨ö=öce—•MüFMu‘≠[t˝:aˇÏ]◊¨ÕêvEŸ´}èÊ<ˆ7‘ﬁØãÁFhπ∆ﬁ1õ'G˛¸°Ù·’%™∂^ÙxèÌ≥sSÁΩ&xÇ›≥üoâ}–Ó‰ Ü[`sÂ∑À/ﬂÕΩ∂}˛ﬂÂÎ◊œøˇº3(ø˙Ó√o¿¸÷N=}2œ>Ö‚pæ˝4ØB)ê∂9Ãp¬‘p√Ë.ÑMºMspEê<T1EÔ[àBKÑëæg¥≈˝≥pFá‚3H!o,—ª]|¨E&i
1…˜ÄîNGÚF≤C%§—ƒàî;º(-åÒI–ú4”π«‰≈©,”À,{‘í:•|SF;Àd3À4ECÛOó∂ÎSK?ˇèªS«#ç≥æ+$4ŒH€ÑnQ9˝,PLY˙p¿0=]GP%Ï¥?C;ı3¿¸œS2O$’’M1”tVƒ‹≥5◊õj’50\{&^É’KVbèuiXdóe6;eõÖ6⁄“ûï∂Zk-£ˆZm∑E,[nø7/o√%∑‹∂∆57]uΩBw]wﬂç™]xÁ•w(yÎ≈7ﬂöÓ’∑_I‚˜_Å÷(`ÇF"Éf∏aÉv8bÜ!ñ∏‚Å)∂8c}1÷∏„y9ˆ8duAˆM—Rq=9Œ πîRe2S˝àÂ7Cç˘Sëõ"yµ˛bΩ4œ Ω3…_!u9£_Éé9∆°oﬁ5∏j\ÛQ›ˇTtiüWÖ9È©aii¶Ö 5®)˝R<îçTı’≥M4µmDü;z?!Î|õQπ‰9V7øN÷iiÂ˘Â©·.:T¬bµM7ÈL5nE˝9Í∆ïN0Ú¨˘&å'·öµRÍÀ+˝| …E÷VÌé|…∏πõíH˘™Dœ«¡ƒÛê¬>≠ÛπC'}È†ﬂ⁄Íñ·$kõ≥Ü}Ù´âfﬁˆÙ¸éVwÀyß—ÎﬂÕ.ö˘=}¶˝xπ~y™cﬂûR·ùˇw”§áºv/Å&{˜µ4˘ˆˇæ˘Ó˜_ºr¸Èß˙
=hôåU2kùÎ®6aOe¶ZŸ›zw∑äh7‘¢DU¡ˇ9QPÄ #‡mÂ5ND}%\Ã˘PHóÆI∆r!5Cé¨Ö5ƒ°∂NòCÆfá="†nD"ÎáED"∂ÜòD&
ÍàMÑbbûE*fäUƒ¢^ÆòE.Œeã]£[æF2ûE,9*c=sF$©—çì„ÂHï8Œ—éO©„ıhî<Ó—èVY‚)Æ@“êrÈ„!)¨B.“ëfl‰#%IôHN“í|©‰%5)ïDn“ìÈ‰'E˘êPé“î%…‰)UôìRÆ“ïçIÂ+e…»Œ“ñ?iÂ-EôK]zíóΩ‘‰/ÅiIaSí≈4¶#ëôLE.ìôÜtÊ3Mi˙ˇëö’‘„5±iGmnSé›Ù¶¡Œ4éìúd4Á9¡òNurëùÌƒ‚;·IEyŒäı¥'ÒôO$ÓìüDÙÁ?ÅPÅÚê†≈·AJCÖ.‘Öu(
!QNî¢¥ËEùóQçbé£˝⁄GAz3ëé4d%5i«Pö“å≠î•sÈK#Sô6å¶5MÿMqz0ùÓÙb±ÙÈ'{Tï®ÍQ/iT•÷ã©M˝XR°˙»ßN’]Uµ™kô’Ubï´ÂÚÍW√V±~ã¨e›÷Y—z-µÆµZmuk¥‡◊fÕïÆÀ≤Î]èïWΩQ™}}#_´+¡÷VÖ5Ï¶õX'˛ï±ˇa\ÏcÕY…2â≤ï]—e1À Õn=ùı¨≥⁄(Çñ¥ÌiıôZ’ˆìµ≠Ëka;PŸŒ÷†µµmBqõ[ÜÓñ∑ıÌo%\·Vî∏≈≈ËqëªQÂ.◊£ÕunH°]íNó∫'µÓuUö]Ì∂îª›ÖÈw¡;SÒé◊¶Â5oN—õ^ûÆóΩ?›Í{c_˘“ñæıΩÌ}Ò´[˝Ó∑∑˝ı/p‡·ò¿∆5Åìõ`3ó¡~ÓÉ!,]	O∏∫∂0v1ú·Ìnò√ﬁıá√bìóƒ%>ÔâQ¨^Ø∏Ω-v1|„œò∆∂Òç/úckò«=ÓèÅb!yƒE6ˇ≤âëú‰/ô…,vÚì_e)À∏3UVÚï±‹d-o ]ˆÚî¡f+oéÃ3Ìô9È^5ñÕmVÏõ·‹Xœ9≠r∂ÛdÒúgÀÓôœôıÛü9hAñ–Ömù]◊C/µäv4≤“i\6ö“©±Ù•YîiM“ù&,ßAù)QèZ3ì6ıLPùÍò¨ö’/qı´ü˜iYß)÷µŒïq-ÈRÔ∫IΩˆıbnlèõÿ¿°ı±◊clegÑŸÕæ»≥°]iO€Ñ¿∂ˆ_™ùmÖaõ€ZÙˆ∑Ò≤mq3Ñ‹ÂFe≤—ΩiuØ€”∫v7†€oRœõﬁß˜Ωœïo}ßÂ‹˝Ü•ΩˇG~º,ˇÓ7¬ı≠{3úﬁè7ƒ›-ÒuS›/7∆≈≠Òosú€œ6»≠-Úiì⁄&o6 ï≠Úc≥úÿ.6Ã}-Û]”◊6Ø5Œe≠ÛWÛú’>O5–M-ÙQ‘FÔ4“5≠ÙK3ù“Nè4‘-ıES—V/4÷≠ı?sùœ^œ3ÿÌ,ˆ9ìŒfo3⁄’¨ˆ3≥ùÃn3‹Ω,˜-”ÀvØ2ﬁ•¨˜'Ûù…~O2‡ç,¯!»ÜÔ1‚u¨¯3û∆éè1‰],˘S≈ñ/1ÊE¨˘sû√ûœ0Ë-,˙	ì¬¶o0Í¨˙≥û¿Æ0Ï˝+˚˝“ø∂Ø/ÓÂ´´˚˜*E8P…Ñ?|‚ﬂ¯«G~Úïø|Ê7ﬂ˘œá~Ù•?}ÍWﬂ˙◊«~ˆµø}Ówﬂ˚ﬂ¯≈?˛„À`'+àA˙’ø~ˆ∑ﬂ˝Ôá¸Â?˙◊ﬂ˛˜«˛ıø˛˜ﬂˇˇ¿ ¿$¿4¿D¿T¿˙#Ä ÄÑ¿î¿	§¿
¥¿ƒ¿‘¿‰¿Ù¿¡¡$¡4¡D¡T¡d¡t¡ÑA ;Yimage/gif_5http://www.brokenthorn.com/Resources/images/Krnl1.gifOÉbplist00‘
X$versionY$archiverT$topX$objects Ü†_NSKeyedArchiver—	_WebResourceResponseÄØ''-.4567YZ[\]^_`abcdefghijklmnopqrstuyU$null› !"#$%&___nsurlrequest_proto_prop_obj_6___nsurlrequest_proto_prop_obj_3R$2___nsurlrequest_proto_prop_obj_0R$3___nsurlrequest_proto_prop_obj_4V$class___nsurlrequest_proto_prop_obj_1R$4R$0___nsurlrequest_proto_prop_obj_5___nsurlrequest_proto_prop_obj_2R$1ÄÄÄ	ÄÄ&ÄÄ Ä”()$+,WNS.base[NS.relativeÄ ÄÄ_5http://www.brokenthorn.com/Resources/images/Krnl1.gif“/012Z$classnameX$classesUNSURL¢13XNSObject#A¬˛kŸÎë »”89:IXWNS.keysZNS.objectsÆ;<=>?@ABCDEFGHÄ	Ä
ÄÄÄÄÄÄÄÄÄÄÄÄÆKLMNOPQRSTUVWÄÄÄÄÄÄÄÄÄÄ Ä!Ä"Ä#Ä$Ä%\Content-TypeWUpgradeZKeep-Alive]Last-ModifiedVServerWExpires]Cache-ControlTDate^Content-LengthZConnectionX__hhaa__TEtagTVary]Accept-RangesYimage/gifRh2_timeout=2, max=100_Sat, 27 Oct 2007 05:25:20 GMTVApache_Mon, 12 Apr 2021 11:21:23 GMT_max-age=2592000_Sat, 13 Mar 2021 11:21:23 GMTT8646_Upgrade, Keep-Alive_¿

YnBsaXN0MDDdAQIDBAUGBwgJCgsMDQ4QEhQWGBocHiAiJCZcQ29udGVudC1UeXBlV1VwZ3JhZGVaS2VlcC1BbGl2ZVRWYXJ5VlNlcnZlcldFeHBpcmVzXUNhY2hlLUNvbnRyb2xURGF0ZV5Db250ZW50LUxlbmd0aFpDb25uZWN0aW9uVEV0YWddQWNjZXB0LVJhbmdlc11MYXN0LU1vZGlmaWVkoQ9ZaW1hZ2UvZ2lmoRFSaDKhE18QEnRpbWVvdXQ9MiwgbWF4PTEwMKEVWlVzZXItQWdlbnShF1ZBcGFjaGWhGV8QHU1vbiwgMTIgQXByIDIwMjEgMTE6MjE6MjMgR01UoRtfEA9tYXgtYWdlPTI1OTIwMDChHV8QHVNhdCwgMTMgTWFyIDIwMjEgMTE6MjE6MjMgR01UoR9UODY0NqEhXxATVXBncmFkZSwgS2VlcC1BbGl2ZaEjXxAUIjIxYzYtNDNkNzJiMTdhNzAwMCKhJVVieXRlc6EnXxAdU2F0LCAyNyBPY3QgMjAwNyAwNToyNToyMCBHTVQACAAjADAAOABDAEgATwBXAGUAagB5AIQAiQCXAKUApwCxALMAtgC4AM0AzwDaANwA4wDlAQUBBwEZARsBOwE9AUIBRAFaAVwBcwF1AXsBfQAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAAGd_"21c6-43d72b17a7000"ZUser-AgentUbytes“/0vw_NSMutableDictionary£vx3\NSDictionary“/0z{_NSHTTPURLResponse£|}3_NSHTTPURLResponse]NSURLResponse    $ ) 2 7 I L b d é î Ø — Û ˆ=Dfilé∞≥µ∑πªΩø¡√ƒ∆» Ã”€ÁÈÎÌ%*5>DGPY[]dlwÜàäåéêíîñòöúû†¢±≥µ∑πªΩø¡√≈«…ÀÕœ‹‰Ô˝.9BGLZdg|ú£√’ı˙‘Îˆ¸(-AEY             ~              g‘ !"#Oˇÿˇ‡ JFIF  ` `  ˇ· Exif  II*     ˛              -      ) 1;    ¬        ÅÇ     Ä{    »        ÄÄ           ÿ       Ë               ÑÇ(     }=     Ui          ı  Ú  ◊  Ì  ˝	  Â  g   `      `      ˇ€ C 		
 $.' ",#(7),01444'9=82<.342ˇ€ C			2!!22222222222222222222222222222222222222222222222222ˇ¿  ) " ˇƒ           	
ˇƒ µ   } !1AQa"q2Åë°#B±¡R—$3brÇ	
%&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyzÉÑÖÜáàâäíìîïñóòôö¢£§•¶ß®©™≤≥¥µ∂∑∏π∫¬√ƒ≈∆«»… “”‘’÷◊ÿŸ⁄·‚„‰ÂÊÁËÈÍÒÚÛÙıˆ˜¯˘˙ˇƒ        	
ˇƒ µ  w !1AQaq"2ÅBë°±¡	#3Rbr—
$4·%Ò&'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyzÇÉÑÖÜáàâäíìîïñóòôö¢£§•¶ß®©™≤≥¥µ∂∑∏π∫¬√ƒ≈∆«»… “”‘’÷◊ÿŸ⁄‚„‰ÂÊÁËÈÍÚÛÙıˆ˜¯˘˙ˇ⁄   ? ˜“q\Ôã|[e·M4\Næu‘π[[Ul4Ã=˚(»Àv»ÍHÒwã¨|%¶ãÄe∫ó+mj≠ÜôáÚQëñÌë‘êî⁄%÷°©K‚zQ%¸ÉÖ∆ÖQíúºíI$ö„∆c#áèôÕàƒ∆í”q.¸?®¯Ü9ı›gPhuñƒ∞:ùãlÊUSú¶:åÉÛírñˇ /t˚xÌ5ﬁ˙Ó!∂Kï‘<è7–îBúc88ŒH p-XY_¸B’¬ Wµ–Ìüwä9r9ÿô±»=¬Ç	Ájüb”t€=NÉO∞∑ˆ∞.‘ç9π$ûI$íI$íI$ö√.é!ßR≥ﬂdcÑç]e'πÛ˘∫‘5^\xê:Îh€X ‰"ë¥g#êwI&ü¨KÊ\Ÿ¡{<ˆ˙Dí(∫û›í(œ?/_N«ú66üYÒœÅ‡ÒU¢›Z≤€kÀã{ú|Æ:à‰«U…8=TíGp|û⁄‚C5∆ì™€47–.h$$åvŒ‰Ç Ú+óFt´,Gƒé|E)S©Ì®˜ùœM∞—¨ÌÙÖÖtıå<ñ‹¨ßù¡øã9Œ„íI…$ú÷ùxgÜ|Qs‡kø≤]4óùÛÚÇÕj«í :ëúÓQ…ÂÜC{\)soˆ“C4®xÂI2ÆßêAAÎ^Ω
–≠hï±©ƒúÙÆ3«>á≈V´wlÀm¨€/˙=∆ﬂÀìî…8=TíGRg⁄ä—≈IYó(©+3ÊÈµQcowe≠€47ñŸéh%… u«±#Ç û	—”>¸GüNÜm?ZìH¥êä…ı‡h¡$Û)
Oﬁ#®œ89{‚O¸ñˇ ‹?ˇ JﬁΩƒtÀÜ¬Bå•À‘‰£áå±ˇŸZimage/jpeg_4http://www.brokenthorn.com/Resources/images/left.jpgOÇbplist00‘
X$versionY$archiverT$topX$objects Ü†_NSKeyedArchiver—	_WebResourceResponseÄØ''-.4567YZ[\]^_`abcdefghijklmnopqrstuyU$null› !"#$%&___nsurlrequest_proto_prop_obj_6___nsurlrequest_proto_prop_obj_3R$2___nsurlrequest_proto_prop_obj_0R$3___nsurlrequest_proto_prop_obj_4V$class___nsurlrequest_proto_prop_obj_1R$4R$0___nsurlrequest_proto_prop_obj_5___nsurlrequest_proto_prop_obj_2R$1ÄÄÄ	ÄÄ&ÄÄ Ä”()$+,WNS.base[NS.relativeÄ ÄÄ_4http://www.brokenthorn.com/Resources/images/left.jpg“/012Z$classnameX$classesUNSURL¢13XNSObject#A¬˛kŸÎò| »”89:IXWNS.keysZNS.objectsÆ;<=>?@ABCDEFGHÄ	Ä
ÄÄÄÄÄÄÄÄÄÄÄÄÆKLMNOPQRSTUVWÄÄÄÄÄÄÄÄÄÄ Ä!Ä"Ä#Ä$Ä%\Content-TypeWUpgradeZKeep-Alive]Last-ModifiedVServerWExpires]Cache-ControlTDate^Content-LengthZConnectionX__hhaa__TEtagTVary]Accept-RangesZimage/jpegRh2_timeout=2, max=100_Fri, 24 Jul 2009 23:29:22 GMTVApache_Mon, 12 Apr 2021 10:13:14 GMT_max-age=2592000_Sat, 13 Mar 2021 10:13:14 GMTT1540_Upgrade, Keep-Alive_¿

YnBsaXN0MDDdAQIDBAUGBwgJCgsMDQ4QEhQWGBocHiAiJCZcQ29udGVudC1UeXBlV1VwZ3JhZGVaS2VlcC1BbGl2ZVRWYXJ5VlNlcnZlcldFeHBpcmVzXUNhY2hlLUNvbnRyb2xURGF0ZV5Db250ZW50LUxlbmd0aFpDb25uZWN0aW9uVEV0YWddQWNjZXB0LVJhbmdlc11MYXN0LU1vZGlmaWVkoQ9aaW1hZ2UvanBlZ6ERUmgyoRNfEBJ0aW1lb3V0PTIsIG1heD0xMDChFVpVc2VyLUFnZW50oRdWQXBhY2hloRlfEB1Nb24sIDEyIEFwciAyMDIxIDEwOjEzOjE0IEdNVKEbXxAPbWF4LWFnZT0yNTkyMDAwoR1fEB1TYXQsIDEzIE1hciAyMDIxIDEwOjEzOjE0IEdNVKEfVDE1NDChIV8QE1VwZ3JhZGUsIEtlZXAtQWxpdmWhI18QEyI2MDQtNDZmN2JmOTViMTg4MCKhJVVieXRlc6EnXxAdRnJpLCAyNCBKdWwgMjAwOSAyMzoyOToyMiBHTVQACAAjADAAOABDAEgATwBXAGUAagB5AIQAiQCXAKUApwCyALQAtwC5AM4A0ADbAN0A5ADmAQYBCAEaARwBPAE+AUMBRQFbAV0BcwF1AXsBfQAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAAGd_"604-46f7bf95b1880"ZUser-AgentUbytes“/0vw_NSMutableDictionary£vx3\NSDictionary“/0z{_NSHTTPURLResponse£|}3_NSHTTPURLResponse]NSURLResponse    $ ) 2 7 I L b d é î Ø — Û ˆ=Dfilé∞≥µ∑πªΩø¡√ƒ∆» Ã”€ÁÈÎÌ$)4=CFOXZ\ckvÖáâãçèëìïóôõùü°∞≤¥∂∏∫ºæ¿¬ƒ∆» ÃŒ€„Ó¸-8AFKYdg|ú£√’ı˙‘Íı˚ ',@DX             ~              f‘%!&'Odˇÿˇ‡ JFIF  ` `  ˇ· Exif  II*     ˛              -      )       ¬                     »                     ÿ       Ë                 (       =                 ı  Ú  ◊  Ì  ˝	  Â  g   `      `      ˇ€ C 		
 $.' ",#(7),01444'9=82<.342ˇ€ C			2!!22222222222222222222222222222222222222222222222222ˇ¿  % " ˇƒ           	
ˇƒ µ   } !1AQa"q2Åë°#B±¡R—$3brÇ	
%&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyzÉÑÖÜáàâäíìîïñóòôö¢£§•¶ß®©™≤≥¥µ∂∑∏π∫¬√ƒ≈∆«»… “”‘’÷◊ÿŸ⁄·‚„‰ÂÊÁËÈÍÒÚÛÙıˆ˜¯˘˙ˇƒ        	
ˇƒ µ  w !1AQaq"2ÅBë°±¡	#3Rbr—
$4·%Ò&'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyzÇÉÑÖÜáàâäíìîïñóòôö¢£§•¶ß®©™≤≥¥µ∂∑∏π∫¬√ƒ≈∆«»… “”‘’÷◊ÿŸ⁄‚„‰ÂÊÁËÈÍÚÛÙıˆ˜¯˘˙ˇ⁄   ? e’ÌÁçuKçCR∏í÷ÍŸ Z⁄FJõ&Sëÿ6Ì¿dI¶ ç‡Ø>•/ˆ&∂-b1î|an‘ˇ µ∆Hˆ»Ë¡[„>©'ˆﬁà´µ” -⁄è·oˆ∞8cÿ {‡#0xÇ◊kyñ∫Ö´‰VX$RG‘`éG\é†äÒÎU´Ö≠œ-`ˇ ÀúÍaÍ^Z¶{÷·åÁä+ÑWåﬂPü˚\€±˘¢›®˛!˛ﬂ#Ò^
W´
ëúy¢zPúfÆéﬁkàm≠‰û‚dä‘ºíHv™($ì–ﬁº7V’mºM„6÷4Àakeà⁄‡Ç≠wè‚uŒ FÏNp™û/Òúû1ª˚£<:NSîk∂áaŸs»S˛ÒÁ2mÕ˛©®C°hPóºê∂HXTpYà˚™23ﬂ$ñ‚º‹]gW˝ûíΩ˜<¸MgU˚:hª©¸C´ŸË∫,mQ[Õ[Öbøf⁄FX∏ÂúsÎÄl
+◊º!‡Î/Èf∂˝ı‘∏k´∂Pf8˛;Tp9ÍI$Æº.4)(^ÁM?≥çÆy≈=◊¡wˆ˜:QhÌµ•≤éMπŸËßx„.ÎæÖáÑ¥√kl|€ô6µÕ”(3«¬£ù´–dı$íQ[”ÑT§“*äõi=QVnˇŸ_5http://www.brokenthorn.com/Resources/images/right.jpgO0bplist00‘
X$versionY$archiverT$topX$objects Ü†_NSKeyedArchiver—	_WebResourceResponseÄØ%'-.4567WXYZ[\]^_`abcdefghijklmnopquU$null› !"#$%&___nsurlrequest_proto_prop_obj_6___nsurlrequest_proto_prop_obj_3R$2___nsurlrequest_proto_prop_obj_0R$3___nsurlrequest_proto_prop_obj_4V$class___nsurlrequest_proto_prop_obj_1R$4R$0___nsurlrequest_proto_prop_obj_5___nsurlrequest_proto_prop_obj_2R$1ÄÄÄ	ÄÄ$ÄÄ Ä”()$+,WNS.base[NS.relativeÄ ÄÄ_5http://www.brokenthorn.com/Resources/images/right.jpg“/012Z$classnameX$classesUNSURL¢13XNSObject#A¬˛kŸÎü‹ »”89:HVWNS.keysZNS.objects≠;<=>?@ABCDEFGÄ	Ä
ÄÄÄÄÄÄÄÄÄÄÄ≠JKLMNOPQRSTUÄÄÄÄÄÄÄÄÄÄÄ Ä!Ä"Ä#\Content-TypeZKeep-Alive]Last-ModifiedVServerWExpires]Cache-ControlTDate^Content-LengthZConnectionX__hhaa__TEtagTVary]Accept-RangesZimage/jpeg_timeout=2, max=98_Fri, 24 Jul 2009 23:29:24 GMTVApache_Mon, 12 Apr 2021 10:13:14 GMT_max-age=2592000_Sat, 13 Mar 2021 10:13:14 GMTT1380ZKeep-Alive_î

YnBsaXN0MDDcAQIDBAUGBwgJCgsMDQ8RExUXGRsdHyEjXENvbnRlbnQtVHlwZVpLZWVwLUFsaXZlVFZhcnlWU2VydmVyV0V4cGlyZXNdQ2FjaGUtQ29udHJvbFREYXRlXkNvbnRlbnQtTGVuZ3RoWkNvbm5lY3Rpb25URXRhZ11BY2NlcHQtUmFuZ2VzXUxhc3QtTW9kaWZpZWShDlppbWFnZS9qcGVnoRBfEBF0aW1lb3V0PTIsIG1heD05OKESWlVzZXItQWdlbnShFFZBcGFjaGWhFl8QHU1vbiwgMTIgQXByIDIwMjEgMTA6MTM6MTQgR01UoRhfEA9tYXgtYWdlPTI1OTIwMDChGl8QHVNhdCwgMTMgTWFyIDIwMjEgMTA6MTM6MTQgR01UoRxUMTM4MKEeWktlZXAtQWxpdmWhIF8QEyI1NjQtNDZmN2JmOTc5OWQwMCKhIlVieXRlc6EkXxAdRnJpLCAyNCBKdWwgMjAwOSAyMzoyOToyNCBHTVQACAAhAC4AOQA+AEUATQBbAGAAbwB6AH8AjQCbAJ0AqACqAL4AwADLAM0A1ADWAPYA+AEKAQwBLAEuATMBNQFAAUIBWAFaAWABYgAAAAAAAAIBAAAAAAAAACUAAAAAAAAAAAAAAAAAAAGC_"564-46f7bf9799d00"ZUser-AgentUbytes“/0rs_NSMutableDictionary£rt3\NSDictionary“/0vw_NSHTTPURLResponse£xy3_NSHTTPURLResponse]NSURLResponse    $ ) 2 7 I L b d å í ≠ œ Ò Ù;BdgjåÆ±≥µ∑πªΩø¡¬ƒ∆» —ŸÂÁÈÎ#(3<BENWY[bjuÉÖáâãçèëìïóôõù´≠Ø±≥µ∑πªΩø¡√≈«‘ﬂÌÙ¸
)27<JUiâê∞¬‚ÁÚä†´±∂Ã–›‚ˆ˙             z                          1   <   N   d   Ç   ë   ®  Æ°  Æ´  Æ±  ÆÂ  ÆÊ  ÆÏ  Æı  Ø  πæ  π«  ∫  ¬Ω  ¬∆  ˇ5  ˇ?  ˇq ! * )Ù )˛ *6 2Ω 2∆ 8Œ 8Ÿ 9 Añ Aü G G?             (             Os